[{"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\index.js":"1","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\App.js":"3","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Footer.js":"4","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Login.js":"5","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Applications.js":"6","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Home.js":"7","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Logout.js":"8","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Profile.js":"9","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Signup.js":"10","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Navbar.js":"11","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\MessagePopup.js":"12","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\JobApplications.js":"13","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\CreateJobs.js":"14","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\isAuth.js":"15","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"16","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\Profile.js":"17","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\MyJobs.js":"18","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Welcome.js":"19","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\apiList.js":"20","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\PasswordInput.js":"21","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\FileUploadInput.js":"22","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\EmailInput.js":"23","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useAnimations.js":"24","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\services.js":"25","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\servicecard.js":"26","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Wave.js":"27","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\ServiceCardsData.js":"28","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useScroll.js":"29","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\query.js":"30","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\AccordionData.js":"31","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AccordionItem.js":"32","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\agent.js":"33","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruteragent.js":"34","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\ai-interview.js":"35","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\resume.js":"36","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AudioInterview.js":"37"},{"size":500,"mtime":1728195834043,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":1728195834106,"results":"40","hashOfConfig":"39"},{"size":3786,"mtime":1746028339021,"results":"41","hashOfConfig":"39"},{"size":4786,"mtime":1728233179207,"results":"42","hashOfConfig":"39"},{"size":4011,"mtime":1730822387922,"results":"43","hashOfConfig":"39"},{"size":8052,"mtime":1747755038386,"results":"44","hashOfConfig":"39"},{"size":22897,"mtime":1747753856870,"results":"45","hashOfConfig":"39"},{"size":497,"mtime":1730642256967,"results":"46","hashOfConfig":"39"},{"size":8740,"mtime":1748103566590,"results":"47","hashOfConfig":"39"},{"size":14550,"mtime":1730822466761,"results":"48","hashOfConfig":"39"},{"size":8625,"mtime":1747754224434,"results":"49","hashOfConfig":"39"},{"size":496,"mtime":1728197859349,"results":"50","hashOfConfig":"39"},{"size":27939,"mtime":1747753488135,"results":"51","hashOfConfig":"39"},{"size":9892,"mtime":1746024953472,"results":"52","hashOfConfig":"39"},{"size":165,"mtime":1728195835360,"results":"53","hashOfConfig":"39"},{"size":24290,"mtime":1728288120435,"results":"54","hashOfConfig":"39"},{"size":5036,"mtime":1747754084692,"results":"55","hashOfConfig":"39"},{"size":26024,"mtime":1746026368431,"results":"56","hashOfConfig":"39"},{"size":4997,"mtime":1747754086419,"results":"57","hashOfConfig":"39"},{"size":748,"mtime":1748103403702,"results":"58","hashOfConfig":"39"},{"size":1666,"mtime":1728195835235,"results":"59","hashOfConfig":"39"},{"size":8569,"mtime":1748104065542,"results":"60","hashOfConfig":"39"},{"size":1167,"mtime":1728195835047,"results":"61","hashOfConfig":"39"},{"size":2481,"mtime":1728218132948,"results":"62","hashOfConfig":"39"},{"size":3100,"mtime":1728395962540,"results":"63","hashOfConfig":"39"},{"size":1109,"mtime":1728395952478,"results":"64","hashOfConfig":"39"},{"size":945,"mtime":1728395452003,"results":"65","hashOfConfig":"39"},{"size":1195,"mtime":1728395041509,"results":"66","hashOfConfig":"39"},{"size":514,"mtime":1728395454756,"results":"67","hashOfConfig":"39"},{"size":2179,"mtime":1728396265020,"results":"68","hashOfConfig":"39"},{"size":1119,"mtime":1728395741862,"results":"69","hashOfConfig":"39"},{"size":1394,"mtime":1728396078121,"results":"70","hashOfConfig":"39"},{"size":12031,"mtime":1732175838762,"results":"71","hashOfConfig":"39"},{"size":7478,"mtime":1746026282233,"results":"72","hashOfConfig":"39"},{"size":22405,"mtime":1747753804881,"results":"73","hashOfConfig":"39"},{"size":12195,"mtime":1746026265280,"results":"74","hashOfConfig":"39"},{"size":26453,"mtime":1748103792248,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"18mp7kw",{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\index.js",[],["154","155"],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\App.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Footer.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Login.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Applications.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Home.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Logout.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Profile.js",["156"],"import {\n  Button,\n  Grid,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {education.map((obj, key) => (\n        <Grid item container className={classes.inputBox} key={key}>\n          <Grid item xs={6}>\n            <TextField\n              label={`Institution Name #${key + 1}`}\n              value={education[key].institutionName}\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].institutionName = event.target.value;\n                setEducation(newEdu);\n              }}\n              variant=\"outlined\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Start Year\"\n              value={obj.startYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].startYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"End Year\"\n              value={obj.endYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].endYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n        </Grid>\n      ))}\n      <Grid item style={{ alignSelf: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() =>\n            setEducation([\n              ...education,\n              {\n                institutionName: \"\",\n                startYear: \"\",\n                endYear: \"\",\n              },\n            ])\n          }\n          className={classes.inputBox}\n        >\n          Add another institution details\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n  });\n\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n\n  const [profileData, setProfileData] = useState({\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n  });\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  const getData = useCallback(() => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        if (response.data.education.length > 0) {\n          setEducation(\n            response.data.education.map((edu) => ({\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\n              startYear: edu.startYear ? edu.startYear : \"\",\n              endYear: edu.endYear ? edu.endYear : \"\",\n            }))\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  }, [setPopup]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  useEffect(() => {\n    if (profileDetails) {\n      setProfileData(profileDetails);\n      console.log(\"Profile details loaded:\", profileDetails);\n    }\n  }, [profileDetails]);\n\n  const handleUpdate = () => {\n    console.log(education);\n\n    let updatedDetails = {\n      ...profileDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <Paper\n      style={{\n        padding: \"50px\",\n        outline: \"none\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n        <Grid item>\n          <Typography variant=\"h2\">Profile</Typography>\n        </Grid>\n        <Grid item xs>\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\n              <Grid item>\n                <TextField\n                  label=\"Name\"\n                  value={profileDetails.name}\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                />\n              </Grid>\n              <MultifieldInput\n                education={education}\n                setEducation={setEducation}\n              />\n              <Grid item>\n                <ChipInput\n                  className={classes.inputBox}\n                  label=\"Skills\"\n                  variant=\"outlined\"\n                  helperText=\"Press enter to add skills\"\n                  value={profileDetails.skills}\n                  onAdd={(chip) =>\n                    setProfileDetails({\n                      ...profileDetails,\n                      skills: [...profileDetails.skills, chip],\n                    })\n                  }\n                  onDelete={(chip, index) => {\n                    let skills = profileDetails.skills;\n                    skills.splice(index, 1);\n                    setProfileDetails({\n                      ...profileDetails,\n                      skills: skills,\n                    });\n                  }}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Resume (.pdf)\"\n                  icon={<DescriptionIcon />}\n                  uploadTo={apiList.uploadResume}\n                  handleInput={handleInput}\n                  identifier={\"resume\"}\n                  initialValue={profileData.resume} // Pass existing resume filename\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Profile Photo (.jpg/.png)\"\n                  icon={<FaceIcon />}\n                  uploadTo={apiList.uploadProfileImage}\n                  handleInput={handleInput}\n                  identifier={\"profile\"}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n              onClick={() => handleUpdate()}\n            >\n              Update Details\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Profile;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Signup.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Navbar.js",["157"],"import {\n  AppBar,\n  Button,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport { motion, useAnimation } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport isAuth, { userType } from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: 'auto', // Move menu icon to right\n    color: 'black', // Make icon visible\n  },\n  title: {\n    flexGrow: 1,\n    color: 'black',\n  },\n  drawer: {\n    width: 240, // Fixed width for drawer\n  },\n  listItem: {\n    padding: theme.spacing(2),\n  },\n  listItemIcon: {\n    minWidth: 40,\n    color: 'black',\n  },\n  listItemText: {\n    marginLeft: theme.spacing(1),\n    color: 'black',\n  }\n}));\n\nconst StyledAppBar = styled(AppBar)`\n  background: white !important;\n  box-shadow: none !important;\n`;\n\nconst StyledButton = styled(motion(Button))`\n  font-family: Chillax, sans-serif !important;\n  color: black !important;\n  position: relative;\n  &:after {\n    content: '';\n    position: absolute;\n    width: 0;\n    height: 2px;\n    bottom: -2px;\n    left: 0;\n    background-color: black;\n    transition: width 0.3s ease-in-out;\n  }\n  &:hover:after {\n    width: 100%;\n  }\n`;\n\nconst Navbar = (props) => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const controls = useAnimation();\n  const [isHovered, setIsHovered] = useState(false);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  const handleClick = (location) => {\n    console.log(location);\n    navigate(location);\n  };\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n    controls.start(\"show\");\n  };\n\n  const buttonVariants = {\n    hidden: { opacity: 0, y: -20 },\n    show: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const toggleDrawer = (open) => () => {\n    setDrawerOpen(open);\n  };\n\n  const renderButtons = () => {\n    const buttons = [];\n\n    if (isAuth()) {\n      if (userType() === \"recruiter\") {\n        buttons.push(\n          <StyledButton key=\"home\" variants={buttonVariants} onClick={() => handleClick(\"/home\")}>\n            Home\n          </StyledButton>,\n          <StyledButton key=\"addjob\" variants={buttonVariants} onClick={() => handleClick(\"/addjob\")}>\n            Add Jobs\n          </StyledButton>,\n          <StyledButton key=\"myjobs\" variants={buttonVariants} onClick={() => handleClick(\"/myjobs\")}>\n            My Jobs\n          </StyledButton>,\n          <StyledButton key=\"employees\" variants={buttonVariants} onClick={() => handleClick(\"/employees\")}>\n            Employees\n          </StyledButton>,\n          <StyledButton key=\"recruiter\" variants={buttonVariants} onClick={() => handleClick(\"/recruiter\")}>\n            Agent\n          </StyledButton>,\n          <StyledButton key=\"profile\" variants={buttonVariants} onClick={() => handleClick(\"/profile\")}>\n            Profile\n          </StyledButton>,\n          <StyledButton key=\"logout\" variants={buttonVariants} onClick={() => handleClick(\"/logout\")}>\n            Logout\n          </StyledButton>\n        );\n      } else {\n        buttons.push(\n          <StyledButton key=\"home\" variants={buttonVariants} onClick={() => handleClick(\"/home\")}>\n            Home\n          </StyledButton>,\n          <StyledButton key=\"applications\" variants={buttonVariants} onClick={() => handleClick(\"/applications\")}>\n            Applications\n          </StyledButton>,\n          <StyledButton key=\"profile\" variants={buttonVariants} onClick={() => handleClick(\"/profile\")}>\n            Profile\n          </StyledButton>,\n          <StyledButton key=\"ai-interview\" variants={buttonVariants} onClick={() => handleClick(\"/ai-interview\")}>\n            Skill Assessment\n          </StyledButton>,\n          \n          <StyledButton key=\"candidate\" variants={buttonVariants} onClick={() => handleClick(\"/candidate\")}>\n            Learning Agent\n          </StyledButton>,\n          <StyledButton key=\"logout\" variants={buttonVariants} onClick={() => handleClick(\"/logout\")}>\n            Logout\n          </StyledButton>\n        );\n      }\n    } else {\n      buttons.push(\n        <StyledButton key=\"login\" variants={buttonVariants} onClick={() => handleClick(\"/login\")}>\n          Login\n        </StyledButton>,\n        <StyledButton key=\"signup\" variants={buttonVariants} onClick={() => handleClick(\"/signup\")}>\n          Signup\n        </StyledButton>\n      );\n    }\n\n    return buttons;\n  };\n\n  const renderIconButtons = () => {\n    const buttons = [];\n\n    if (isAuth()) {\n      if (userType() === \"recruiter\") {\n        buttons.push(\n          { key: \"home\", icon: <HomeIcon />, onClick: () => handleClick(\"/home\") },\n          { key: \"addjob\", icon: <AddIcon />, onClick: () => handleClick(\"/addjob\") },\n          { key: \"myjobs\", icon: <WorkIcon />, onClick: () => handleClick(\"/myjobs\") },\n          { key: \"employees\", icon: <PeopleIcon />, onClick: () => handleClick(\"/employees\") },\n          { key: \"recruiter\", icon: <PersonIcon />, onClick: () => handleClick(\"/recruiter\") },\n          { key: \"profile\", icon: <PersonIcon />, onClick: () => handleClick(\"/profile\") },\n          { key: \"logout\", icon: <ExitToAppIcon />, onClick: () => handleClick(\"/logout\") }\n        );\n      } else {\n        buttons.push(\n          { key: \"home\", icon: <HomeIcon />, onClick: () => handleClick(\"/home\") },\n          { key: \"applications\", icon: <WorkIcon />, onClick: () => handleClick(\"/applications\") },\n          { key: \"profile\", icon: <PersonIcon />, onClick: () => handleClick(\"/profile\") },\n          { key: \"skill-assesment\", icon: <PersonIcon />, onClick: () => handleClick(\"/ai-interview\") },\n          { key: \"candidate\", icon: <PersonIcon />, onClick: () => handleClick(\"/candidate\") },\n          { key: \"logout\", icon: <ExitToAppIcon />, onClick: () => handleClick(\"/logout\") }\n        );\n      }\n    } else {\n      buttons.push(\n        { key: \"login\", icon: <LockOpenIcon />, onClick: () => handleClick(\"/login\") },\n        { key: \"signup\", icon: <PersonAddIcon />, onClick: () => handleClick(\"/signup\") }\n      );\n    }\n\n    return buttons;\n  };\n\n  return (\n    <StyledAppBar position=\"fixed\" onMouseEnter={handleMouseEnter}>\n      <Toolbar>\n        <Link to=\"/\" style={{ textDecoration: 'none' }}>\n          <Typography variant=\"h6\" className={classes.title} style={{ fontFamily: 'Chillax, sans-serif', color: 'black' }}>\n            Talented.ai\n          </Typography>\n        </Link>\n        {isSmallScreen ? (\n  <>\n    <IconButton \n      edge=\"end\"\n      className={classes.menuButton}\n      aria-label=\"menu\"\n      onClick={toggleDrawer(true)}\n    >\n      <MenuIcon />\n    </IconButton>\n    <Drawer \n      anchor=\"right\"\n      open={drawerOpen}\n      onClose={toggleDrawer(false)}\n      classes={{\n        paper: classes.drawer\n      }}\n    >\n      <List>\n        {renderIconButtons().map((button) => (\n          <ListItem \n            button \n            key={button.key} \n            onClick={() => {\n              button.onClick();\n              setDrawerOpen(false);\n            }}\n            className={classes.listItem}\n          >\n            <ListItemIcon className={classes.listItemIcon}>\n              {button.icon}\n            </ListItemIcon>\n            <Typography className={classes.listItemText}>\n              {button.key.charAt(0).toUpperCase() + button.key.slice(1)}\n            </Typography>\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n  </>\n) : (\n          <div style={{ marginLeft: 'auto', display: 'flex' }}>\n            <motion.div initial=\"hidden\" animate={controls} variants={buttonVariants} style={{ display: 'flex' }}>\n              {renderButtons()}\n            </motion.div>\n          </div>\n        )}\n      </Toolbar>\n    </StyledAppBar>\n  );\n};\n\nexport default Navbar;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\MessagePopup.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\JobApplications.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\CreateJobs.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\isAuth.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\Profile.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\MyJobs.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Welcome.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\apiList.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\PasswordInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\FileUploadInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\EmailInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useAnimations.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\services.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\servicecard.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Wave.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\ServiceCardsData.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useScroll.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\query.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\AccordionData.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AccordionItem.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\agent.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruteragent.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\ai-interview.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\resume.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AudioInterview.js",["158","159"],"import { Box, Button, CircularProgress, Paper, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Mic, Stop, VolumeUp } from '@material-ui/icons';\nimport axios from 'axios';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport Webcam from \"webcam-easy\";\nimport { SetPopupContext } from '../App';\nimport apiList from '../lib/apiList';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(4),\n    maxWidth: '800px',\n    margin: '0 auto',\n  },\n  title: {\n    marginBottom: theme.spacing(4),\n    textAlign: 'center',\n  },\n  questionCard: {\n    padding: theme.spacing(3),\n    marginBottom: theme.spacing(4),\n  },\n  answerArea: {\n    padding: theme.spacing(3),\n    marginBottom: theme.spacing(4),\n    backgroundColor: '#f5f7fa',\n  },\n  transcript: {\n    minHeight: '100px',\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(2),\n    border: '1px solid #ddd',\n    borderRadius: '4px',\n    backgroundColor: '#fff',\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginTop: theme.spacing(3),\n  },\n  recordButton: {\n    backgroundColor: props => props.isRecording ? '#f44336' : '#4caf50',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: props => props.isRecording ? '#d32f2f' : '#388e3c',\n    },\n  },\n  progress: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  feedbackCard: {\n    padding: theme.spacing(3),\n    marginTop: theme.spacing(2),\n    backgroundColor: '#e8f5e9',\n  },\n  loadingContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '300px',\n    flexDirection: 'column',\n  },\n  navigationButtons: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginTop: theme.spacing(4),\n  },\n  summary: {\n    padding: theme.spacing(3),\n    marginTop: theme.spacing(4),\n    backgroundColor: '#e3f2fd',\n  },\n  questionNumber: {\n    fontWeight: 'bold', \n    fontSize: '0.9rem',\n    color: '#666',\n    marginBottom: theme.spacing(1),\n  },\n  questionPrompt: {\n    fontSize: '1.1rem',\n    fontWeight: 'bold',\n    marginBottom: theme.spacing(2),\n  },\n  voiceButton: {\n    marginLeft: theme.spacing(2),\n  },\n  videoContainer: {\n    width: '100%',\n    maxWidth: '640px',\n    height: '360px',\n    margin: '0 auto',\n    backgroundColor: '#000',\n    overflow: 'hidden',\n    borderRadius: '4px',\n    position: 'relative',\n  },\n  videoElement: {\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover',\n  },\n  recordingIndicator: {\n    position: 'absolute',\n    top: '10px',\n    right: '10px',\n    width: '12px',\n    height: '12px',\n    borderRadius: '50%',\n    backgroundColor: 'red',\n    animation: '$blink 1s infinite',\n  },\n  '@keyframes blink': {\n    '0%': { opacity: 1 },\n    '50%': { opacity: 0.4 },\n    '100%': { opacity: 1 },\n  },\n}));\n\nconst AudioInterview = () => {\n  const { jobId, applicationId } = useParams();\n  const navigate = useNavigate();\n  const setPopup = useContext(SetPopupContext);\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [question, setQuestion] = useState(null);\n  const [answer, setAnswer] = useState('');\n  const [score, setScore] = useState(0);\n  const [feedback, setFeedback] = useState('');\n  const [jobDetails, setJobDetails] = useState(null);\n  const [interviewComplete, setInterviewComplete] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n  const [error, setError] = useState(null);\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const [cameraReady, setCameraReady] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const webcamVideoRef = useRef(null);\n  const webcamCanvasRef = useRef(null);\n  const webcamInstanceRef = useRef(null);\n  const [mediaRecorderReady, setMediaRecorderReady] = useState(false);\n  \n  const classes = useStyles({ isRecording });\n\n  // Initialize speech recognition with better error handling\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      setError('Speech recognition is not supported in your browser. Try Chrome or Edge.');\n      return;\n    }\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognitionInstance = new SpeechRecognition();\n    recognitionInstance.continuous = true; // Changed to true for better recording\n    recognitionInstance.interimResults = true; // Changed to true to see real-time results\n    recognitionInstance.lang = 'en-US';\n    recognitionInstance.maxAlternatives = 1;\n\n    let finalTranscript = '';\n    let interimTranscript = '';\n\n    recognitionInstance.onresult = (event) => {\n      finalTranscript = '';\n      interimTranscript = '';\n\n      // Process all results from the current session\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript + ' ';\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n\n      // Update the display with final + interim results\n      const fullTranscript = finalTranscript + interimTranscript;\n      setTranscript(formatTranscript(fullTranscript.trim()));\n    };\n\n    recognitionInstance.onstart = () => {\n      console.log('Speech recognition started');\n      finalTranscript = '';\n      interimTranscript = '';\n      setTranscript(''); // Clear previous transcript\n    };\n\n    recognitionInstance.onend = () => {\n      console.log('Speech recognition ended');\n      if (isRecording) {\n        // If we're still supposed to be recording, restart recognition\n        setTimeout(() => {\n          if (isRecording && recognitionInstance) {\n            try {\n              recognitionInstance.start();\n            } catch (e) {\n              console.log('Recognition restart failed:', e);\n            }\n          }\n        }, 100);\n      }\n    };\n\n    recognitionInstance.onerror = (event) => {\n      console.error('Speech recognition error', event.error);\n      \n      let errorMessage = 'Speech recognition error';\n      if (event.error === 'no-speech') {\n        errorMessage = 'No speech was detected. Please try again.';\n      } else if (event.error === 'audio-capture') {\n        errorMessage = 'Audio capture failed. Please check your microphone.';\n      } else if (event.error === 'not-allowed') {\n        errorMessage = 'Microphone access was denied. Please allow microphone access.';\n      } else if (event.error === 'aborted') {\n        // Don't show error for aborted recognition (user stopped)\n        return;\n      }\n      \n      setPopup({\n        open: true,\n        severity: 'error',\n        message: errorMessage\n      });\n    };\n\n    setRecognition(recognitionInstance);\n\n    return () => {\n      if (recognitionInstance) {\n        try {\n          recognitionInstance.stop();\n        } catch (e) {\n          console.log('Error stopping recognition:', e);\n        }\n      }\n    };\n  }, [setPopup]);\n\n  // Helper function to format transcript with proper capitalization and punctuation\n  const formatTranscript = (text) => {\n    if (!text || text.trim() === '') return '';\n    \n    // Basic cleanup\n    let formatted = text.trim();\n    \n    // Capitalize first letter of sentences\n    formatted = formatted.replace(/(^\\s*\\w|[.!?]\\s*\\w)/g, function(c) { \n      return c.toUpperCase(); \n    });\n    \n    // Add periods if missing at the end of sentences\n    if (!formatted.match(/[.!?]$/)) {\n      formatted += '.';\n    }\n    \n    return formatted;\n  };\n\n  // Fetch job details and generate a single question\n  useEffect(() => {\n    const fetchJobDetails = async () => {\n      try {\n        setLoading(true);\n        const token = localStorage.getItem('token');\n        \n        if (!token) {\n          navigate('/login');\n          return;\n        }\n\n        console.log(`Fetching job with ID: ${jobId}`);\n        \n        // First, fetch the job details\n        const jobResponse = await axios.get(`${apiList.jobs}/${jobId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        \n        setJobDetails(jobResponse.data);\n        console.log(\"Job details:\", jobResponse.data);\n        \n        // Generate a single question\n        await generateQuestion(jobResponse.data);\n      } catch (error) {\n        console.error('Error fetching details:', error);\n        setError('Failed to load job details. Please try again.');\n        setPopup({\n          open: true,\n          severity: 'error',\n          message: 'Failed to load interview details. Please try again.'\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchJobDetails();\n  }, [jobId, applicationId, navigate, setPopup]);\n\n  const generateQuestion = async (jobData) => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      try {\n        // Change the URL to use your local server\n        const questionResponse = await axios.post(\n          'https://talented-ai-api.vercel.app/api/get-interview-question',\n          {\n            jobTitle: jobData.title,\n            skills: jobData.skillsets.join(', '),\n            experience: 2, // Default to mid-level\n            currentQuestion: 0\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n        \n        console.log(\"Question API response:\", questionResponse.data);\n        setQuestion(questionResponse.data);\n      } catch (error) {\n        console.error('Error generating question:', error.response || error);\n        // Create a fallback question if API fails\n        setQuestion({\n          question: `Please explain your experience with ${jobData.skillsets[0] || 'this technology'}`,\n          expectedAnswer: 'A thorough explanation of relevant experience and technical knowledge',\n          difficulty: 'intermediate'\n        });\n      }\n    } catch (error) {\n      console.error('Error generating question:', error);\n      throw error;\n    }\n  };\n\n  // Initialize camera using webcam-easy and set up MediaRecorder\n  useEffect(() => {\n    let webcam;\n    let stream = null;\n    let didCancel = false;\n\n    const setupCamera = async () => {\n      try {\n        // Wait for DOM to render video/canvas elements\n        if (!webcamVideoRef.current || !webcamCanvasRef.current) {\n          // Try again on next tick if refs are not ready\n          setTimeout(setupCamera, 100);\n          return;\n        }\n        webcam = new Webcam(webcamVideoRef.current, \"user\", webcamCanvasRef.current);\n        webcamInstanceRef.current = webcam;\n        await webcam.start();\n        if (didCancel) {\n          webcam.stop();\n          return;\n        }\n        setCameraReady(true);\n\n        // Get the stream from the video element after webcam-easy starts\n        stream = webcamVideoRef.current.srcObject;\n        if (stream) {\n          const recorder = new MediaRecorder(stream, { mimeType: 'video/webm' });\n          mediaRecorderRef.current = recorder;\n          setMediaRecorderReady(true);\n\n          recorder.ondataavailable = (event) => {\n            if (event.data && event.data.size > 0) {\n              setRecordedChunks(prev => [...prev, event.data]);\n            }\n          };\n\n          recorder.onerror = (event) => {\n            setError(\"Error recording video: \" + event.error);\n          };\n        } else {\n          setMediaRecorderReady(false);\n        }\n      } catch (err) {\n        setError(\"Camera/Microphone access error: \" + err.message + \". Please check your camera permissions and refresh the page.\");\n        setCameraReady(false);\n        setMediaRecorderReady(false);\n      }\n    };\n\n    setupCamera();\n\n    return () => {\n      didCancel = true;\n      if (webcamInstanceRef.current) {\n        webcamInstanceRef.current.stop();\n      }\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n        mediaRecorderRef.current.stop();\n      }\n    };\n  }, []);\n\n  const toggleRecording = () => {\n    if (isRecording) {\n      // Stop recording\n      console.log('Stopping recording...');\n      setIsRecording(false);\n      \n      if (recognition) {\n        try {\n          recognition.stop();\n        } catch (e) {\n          console.log('Error stopping recognition:', e);\n        }\n      }\n      \n      // Stop MediaRecorder\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n        mediaRecorderRef.current.stop();\n        console.log(\"Stopping media recorder\");\n      }\n\n      // Process the final answer\n      setTimeout(() => {\n        const finalAnswer = transcript.trim();\n        if (finalAnswer && finalAnswer !== '') {\n          setAnswer(finalAnswer);\n          evaluateAnswer(finalAnswer);\n        } else {\n          setPopup({\n            open: true,\n            severity: 'warning',\n            message: 'No speech detected. Please try recording again.'\n          });\n        }\n      }, 500); // Small delay to ensure recognition has finished\n\n    } else {\n      // Start recording\n      console.log('Starting recording...');\n      setTranscript('');\n      setAnswer('');\n      setFeedback('');\n      setScore(0);\n      setRecordedChunks([]);\n      \n      // Check if camera and microphone are ready\n      if (!cameraReady || !mediaRecorderReady) {\n        setPopup({\n          open: true,\n          severity: 'error',\n          message: 'Camera or microphone not ready. Please wait and try again.'\n        });\n        return;\n      }\n      \n      // Start MediaRecorder first\n      if (mediaRecorderRef.current) {\n        try {\n          mediaRecorderRef.current.start(1000); // Record in 1-second chunks\n          console.log(\"Starting media recorder\");\n        } catch (e) {\n          console.error(\"Error starting media recorder:\", e);\n          setPopup({\n            open: true,\n            severity: 'error',\n            message: 'Failed to start video recording. Please refresh the page.'\n          });\n          return;\n        }\n      }\n      \n      // Start speech recognition\n      if (recognition) {\n        try {\n          recognition.start();\n        } catch (e) {\n          console.error(\"Error starting speech recognition:\", e);\n          setPopup({\n            open: true,\n            severity: 'error',\n            message: 'Failed to start speech recognition. Please try again.'\n          });\n          return;\n        }\n      }\n      \n      setIsRecording(true);\n    }\n  };\n\n  const evaluateAnswer = async (answer) => {\n    try {\n      setLoading(true);\n      \n      // Ensure answer is properly formatted and not empty before sending for evaluation\n      const formattedAnswer = formatTranscript(answer);\n      \n      // Check if answer is empty and use a placeholder if it is\n      if (!formattedAnswer || formattedAnswer.trim() === '') {\n        setPopup({\n          open: true,\n          severity: 'error',\n          message: 'Your answer is empty. Please record an answer before proceeding.'\n        });\n        setLoading(false);\n        return;\n      }\n      \n      console.log(\"Sending answer for evaluation:\", {\n        question: question.question,\n        expectedAnswer: question.expectedAnswer,\n        userAnswer: formattedAnswer\n      });\n      \n      const response = await axios.post(\n        `${apiList.evaluateAnswer}`,\n        {\n          question: question.question,\n          expectedAnswer: question.expectedAnswer,\n          userAnswer: formattedAnswer\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      console.log(\"Evaluation response:\", response.data);\n      \n      // Update feedback and score\n      setFeedback(response.data.feedback);\n      setScore(response.data.score);\n\n    } catch (error) {\n      console.error('Error evaluating answer:', error.response || error);\n      setPopup({\n        open: true,\n        severity: 'error',\n        message: 'Failed to evaluate your answer. Please try again.'\n      });\n\n      // Set default feedback\n      setFeedback(\"We couldn't evaluate this answer automatically. Please review it yourself.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const completeInterview = async () => {\n    try {\n      if (!answer || answer.trim() === '') {\n        setPopup({\n          open: true,\n          severity: 'error',\n          message: 'Please provide an answer before completing the interview.'\n        });\n        return;\n      }\n      \n      setLoading(true);\n      \n      const formattedAnswer = formatTranscript(answer);\n      console.log('Submitting interview with answer:', formattedAnswer);\n      console.log('Recorded chunks count:', recordedChunks.length);\n\n      // Create video blob if we have recorded chunks\n      let videoBlob = null;\n      if (recordedChunks.length > 0) {\n        videoBlob = new Blob(recordedChunks, { type: 'video/webm' });\n        console.log('Video blob size:', videoBlob.size, 'bytes');\n      } else {\n        console.log('No video chunks recorded');\n      }\n\n      const formData = new FormData();\n      formData.append('jobId', jobId);\n      formData.append('applicationId', applicationId);\n      formData.append('questions', question.question);\n      formData.append('answers', formattedAnswer);\n      formData.append('scores', score.toString());\n      formData.append('overallScore', score.toString());\n      \n      if (videoBlob && videoBlob.size > 0) {\n        formData.append('video', videoBlob, 'interview.webm');\n        console.log('Video attached to form data');\n      } else {\n        console.log('No video to attach');\n      }\n\n      console.log('Sending interview results to:', apiList.interviewResults);\n\n      try {\n        const response = await axios.post(\n          apiList.interviewResults,\n          formData,\n          {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n              'Content-Type': 'multipart/form-data'\n            }\n          }\n        );\n\n        console.log('Interview submission response:', response.data);\n\n        if (!response.data || response.data.success === false) {\n          throw new Error(response.data?.message || \"Failed to save interview results\");\n        }\n\n        // Update application status\n        await axios.put(\n          `${apiList.applications}/${applicationId}/interview-complete`,\n          { \n            interviewCompleted: true, \n            interviewScore: score \n          },\n          {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            }\n          }\n        );\n\n        setInterviewComplete(true);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Interview completed and saved successfully!\"\n        });\n\n      } catch (submissionError) {\n        console.error('Interview submission error:', submissionError);\n        let msg = 'Error saving interview results.';\n        if (submissionError.response?.data?.message) {\n          msg = submissionError.response.data.message;\n        } else if (submissionError.message) {\n          msg = submissionError.message;\n        }\n        setPopup({\n          open: true,\n          severity: 'error',\n          message: msg\n        });\n      }\n    } catch (error) {\n      console.error('Complete interview error:', error);\n      setPopup({\n        open: true,\n        severity: 'error',\n        message: 'Error completing interview. Please try again.'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const speakQuestion = () => {\n    if ('speechSynthesis' in window) {\n      // Stop any ongoing speech first\n      window.speechSynthesis.cancel();\n      const speech = new SpeechSynthesisUtterance();\n      speech.text = question?.question || '';\n      speech.lang = 'en-US';\n      speech.rate = 1;\n      speech.pitch = 1;\n      setIsSpeaking(true);\n      speech.onend = () => setIsSpeaking(false);\n      speech.onerror = () => setIsSpeaking(false);\n      window.speechSynthesis.speak(speech);\n    } else {\n      setPopup({\n        open: true,\n        severity: 'error',\n        message: 'Text-to-speech is not supported in your browser.'\n      });\n    }\n  };\n\n  const stopSpeaking = () => {\n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  };\n\n  if (loading && !question) {\n    return (\n      <div className={classes.loadingContainer}>\n        <CircularProgress />\n        <Typography variant=\"h6\" style={{ marginTop: 20 }}>Loading your interview question...</Typography>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={classes.root}>\n        <Paper className={classes.questionCard}>\n          <Typography variant=\"h5\" color=\"error\">{error}</Typography>\n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            onClick={() => navigate(-1)}\n            style={{ marginTop: 20 }}\n          >\n            Go Back\n          </Button>\n        </Paper>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" className={classes.title}>\n        {jobDetails?.title ? `Interview: ${jobDetails.title}` : 'Technical Interview'}\n      </Typography>\n\n      {!interviewComplete ? (\n        <>\n          <Paper className={classes.questionCard}>\n            <Typography variant=\"subtitle1\" style={{ marginBottom: '10px' }}>\n              Camera Preview {isRecording ? '(Recording...)' : '(Ready to record)'}\n            </Typography>\n            <div className={classes.videoContainer}>\n              {/* Webcam Easy video and canvas elements */}\n              <video\n                ref={webcamVideoRef}\n                id=\"webcam\"\n                className={classes.videoElement}\n                autoPlay\n                playsInline\n                muted\n                width={640}\n                height={480}\n              />\n              <canvas\n                ref={webcamCanvasRef}\n                id=\"canvas\"\n                style={{ display: \"none\" }}\n                width={640}\n                height={480}\n              />\n              {isRecording && <div className={classes.recordingIndicator}></div>}\n              {!cameraReady && (\n                <div style={{\n                  position: 'absolute',\n                  top: '50%',\n                  left: '50%',\n                  transform: 'translate(-50%, -50%)',\n                  color: 'white',\n                  textAlign: 'center'\n                }}>\n                  <CircularProgress color=\"secondary\" size={40} />\n                  <Typography variant=\"body2\" style={{ marginTop: 10 }}>\n                    Loading camera...\n                  </Typography>\n                </div>\n              )}\n            </div>\n            {!cameraReady && (\n              <Typography variant=\"body2\" color=\"error\" style={{ marginTop: 10, textAlign: 'center' }}>\n                If your camera doesn't appear, please check your browser permissions and make sure your camera is connected.\n              </Typography>\n            )}\n          </Paper>\n          <Paper className={classes.questionCard}>\n            <Typography className={classes.questionPrompt}>\n              {question?.question || 'Loading question...'}\n            </Typography>\n            <Button \n              startIcon={<VolumeUp />} \n              variant=\"outlined\"\n              className={classes.voiceButton}\n              onClick={isSpeaking ? stopSpeaking : speakQuestion}\n            >\n              {isSpeaking ? 'Stop' : 'Listen'}\n            </Button>\n          </Paper>\n\n          <Paper className={classes.answerArea}>\n            <Typography variant=\"h6\">Your Answer</Typography>\n            <Box className={classes.transcript}>\n              {transcript || 'Your answer will appear here as you speak...'}\n            </Box>\n            <div className={classes.buttonContainer}>\n              <Button\n                variant=\"contained\"\n                className={classes.recordButton}\n                startIcon={isRecording ? <Stop /> : <Mic />}\n                onClick={toggleRecording}\n                disabled={loading || !cameraReady}\n              >\n                {isRecording ? 'Stop Recording' : 'Start Recording'}\n              </Button>\n            </div>\n          </Paper>\n\n          {feedback && (\n            <Paper className={classes.feedbackCard}>\n              <Typography variant=\"h6\">Feedback</Typography>\n              <Typography variant=\"body1\">{feedback}</Typography>\n              <Typography variant=\"h6\" style={{ marginTop: 16 }}>Score: {score}/100</Typography>\n            </Paper>\n          )}\n\n          <div className={classes.navigationButtons} style={{ justifyContent: 'flex-end' }}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={completeInterview}\n              disabled={loading || !answer}\n            >\n              Complete Interview\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Paper className={classes.summary}>\n          <Typography variant=\"h5\" gutterBottom>Interview Complete</Typography>\n          <Typography variant=\"h6\" gutterBottom>Your Score: {score}/100</Typography>\n          \n          <Typography variant=\"h6\" style={{ marginTop: 20 }}>Question Summary:</Typography>\n          <Paper style={{ padding: 16, margin: '12px 0' }}>\n            <Typography variant=\"subtitle1\" style={{ fontWeight: 'bold' }}>Question: {question.question}</Typography>\n            <Typography variant=\"body2\" style={{ marginTop: 8 }}>Your Answer: {answer}</Typography>\n            <Typography variant=\"body2\" style={{ marginTop: 8 }}>Score: {score}/100</Typography>\n          </Paper>\n          \n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            onClick={() => navigate(-1)}\n            style={{ marginTop: 20 }}\n          >\n            Return to Applications\n          </Button>\n        </Paper>\n      )}\n    </div>\n  );\n};\n\nexport default AudioInterview;",{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":172,"column":6,"nodeType":"166","endLine":172,"endColumn":8,"suggestions":"167"},{"ruleId":"168","severity":1,"message":"169","line":85,"column":10,"nodeType":"170","messageId":"171","endLine":85,"endColumn":19},{"ruleId":"168","severity":1,"message":"172","line":137,"column":9,"nodeType":"170","messageId":"171","endLine":137,"endColumn":17},{"ruleId":"164","severity":1,"message":"173","line":241,"column":6,"nodeType":"166","endLine":241,"endColumn":16,"suggestions":"174"},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["177"],"no-unused-vars","'isHovered' is assigned a value but never used.","Identifier","unusedVar","'videoRef' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isRecording'. Either include it or remove the dependency array.",["178"],"no-global-assign","no-unsafe-negation",{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},"Update the dependencies array to be: [getData]",{"range":"183","text":"184"},"Update the dependencies array to be: [isRecording, setPopup]",{"range":"185","text":"186"},[4319,4321],"[getData]",[7274,7284],"[isRecording, setPopup]"]