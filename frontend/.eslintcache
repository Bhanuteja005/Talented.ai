[{"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\index.js":"1","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\App.js":"3","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Footer.js":"4","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Login.js":"5","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Applications.js":"6","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Home.js":"7","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Logout.js":"8","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Profile.js":"9","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Signup.js":"10","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Navbar.js":"11","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\MessagePopup.js":"12","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\JobApplications.js":"13","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\CreateJobs.js":"14","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\isAuth.js":"15","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"16","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\Profile.js":"17","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\MyJobs.js":"18","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Welcome.js":"19","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\apiList.js":"20","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\PasswordInput.js":"21","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\FileUploadInput.js":"22","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\EmailInput.js":"23","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useAnimations.js":"24","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\services.js":"25","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\servicecard.js":"26","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Wave.js":"27","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\ServiceCardsData.js":"28","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useScroll.js":"29","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\query.js":"30","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\AccordionData.js":"31","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AccordionItem.js":"32","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\agent.js":"33","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruteragent.js":"34","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\ai-interview.js":"35","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\resume.js":"36"},{"size":500,"mtime":1728195834043,"results":"37","hashOfConfig":"38"},{"size":362,"mtime":1728195834106,"results":"39","hashOfConfig":"38"},{"size":3552,"mtime":1730643624000,"results":"40","hashOfConfig":"38"},{"size":4786,"mtime":1728233179207,"results":"41","hashOfConfig":"38"},{"size":4011,"mtime":1730822387922,"results":"42","hashOfConfig":"38"},{"size":7269,"mtime":1728290401129,"results":"43","hashOfConfig":"38"},{"size":22069,"mtime":1730820735019,"results":"44","hashOfConfig":"38"},{"size":497,"mtime":1730642256967,"results":"45","hashOfConfig":"38"},{"size":8221,"mtime":1728200218359,"results":"46","hashOfConfig":"38"},{"size":14550,"mtime":1730822466761,"results":"47","hashOfConfig":"38"},{"size":8980,"mtime":1732175790371,"results":"48","hashOfConfig":"38"},{"size":496,"mtime":1728197859349,"results":"49","hashOfConfig":"38"},{"size":22538,"mtime":1728552495702,"results":"50","hashOfConfig":"38"},{"size":8117,"mtime":1728552481280,"results":"51","hashOfConfig":"38"},{"size":165,"mtime":1728195835360,"results":"52","hashOfConfig":"38"},{"size":24290,"mtime":1728288120435,"results":"53","hashOfConfig":"38"},{"size":4999,"mtime":1728195834969,"results":"54","hashOfConfig":"38"},{"size":26040,"mtime":1730821020276,"results":"55","hashOfConfig":"38"},{"size":5688,"mtime":1730816387814,"results":"56","hashOfConfig":"38"},{"size":450,"mtime":1730638748152,"results":"57","hashOfConfig":"38"},{"size":1666,"mtime":1728195835235,"results":"58","hashOfConfig":"38"},{"size":3279,"mtime":1728195835125,"results":"59","hashOfConfig":"38"},{"size":1167,"mtime":1728195835047,"results":"60","hashOfConfig":"38"},{"size":2481,"mtime":1728218132948,"results":"61","hashOfConfig":"38"},{"size":3100,"mtime":1728395962540,"results":"62","hashOfConfig":"38"},{"size":1109,"mtime":1728395952478,"results":"63","hashOfConfig":"38"},{"size":945,"mtime":1728395452003,"results":"64","hashOfConfig":"38"},{"size":1195,"mtime":1728395041509,"results":"65","hashOfConfig":"38"},{"size":514,"mtime":1728395454756,"results":"66","hashOfConfig":"38"},{"size":2179,"mtime":1728396265020,"results":"67","hashOfConfig":"38"},{"size":1119,"mtime":1728395741862,"results":"68","hashOfConfig":"38"},{"size":1394,"mtime":1728396078121,"results":"69","hashOfConfig":"38"},{"size":12031,"mtime":1732175838762,"results":"70","hashOfConfig":"38"},{"size":7486,"mtime":1730818990091,"results":"71","hashOfConfig":"38"},{"size":21748,"mtime":1732173076042,"results":"72","hashOfConfig":"38"},{"size":12760,"mtime":1732175312436,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"18mp7kw",{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"76"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\index.js",[],["154","155"],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\App.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Footer.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Login.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Applications.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Home.js",["156"],"import {\n  Button,\n  Checkbox,\n  Chip,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  Modal,\n  Paper,\n  Slider,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport { userType } from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"90%\",\n    marginLeft: \"auto\",\n    float: \"right\",\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(1.5),\n      width: '100%'\n    }\n  },\n  button: {\n    marginTop:'90px',\n    padding: '5px 15px',\n    fontSize: '0.875rem',\n    borderRadius: '20px',\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const { job } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [sop, setSop] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n    setSop(\"\");\n  };\n\n  const handleApply = () => {\n    console.log(job._id);\n    console.log(sop);\n    axios\n      .post(\n        `${apiList.jobs}/${job._id}/applications`,\n        {\n          sop: sop,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const deadline = new Date(job.deadline).toLocaleDateString();\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3} >\n      <Grid container spacing={1}>\n      <Grid \n      container \n      item \n      xs={12} \n      md={9} \n      spacing={1} \n      direction=\"column\"\n    >\n      <Grid item>\n        <Typography \n          variant=\"h5\"\n          sx={{\n            fontSize: {\n              xs: '1.2rem',\n              sm: '1.5rem'\n            }\n          }}\n        >\n          {job.title}\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n      </Grid>\n      <Grid item>Role : {job.jobType}</Grid>\n      <Grid item>Salary : &#8377; {job.salary} per month</Grid>\n      <Grid item>\n        Duration : {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n      </Grid>\n      <Grid item>Posted By : {job.recruiter.name}</Grid>\n      <Grid item>Application Deadline : {deadline}</Grid>\n\n      <Grid item>\n        {job.skillsets.map((skill) => (\n          <Chip \n            key={skill}\n            label={skill} \n            sx={{ \n              margin: '2px',\n              fontSize: {\n                xs: '0.75rem',\n                sm: '0.875rem'\n              }\n            }} \n          />\n        ))}\n      </Grid>\n    </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            className={classes.button}\n            onClick={() => {\n              setOpen(true);\n            }}\n            disabled={userType() === \"recruiter\"}\n          >\n            Apply\n          </Button>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"50%\",\n            alignItems: \"center\",\n          }}\n        >\n          <TextField\n            label=\"Why Should We Hire you (upto 250 words)\"\n            multiline\n            rows={8}\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\n            variant=\"outlined\"\n            value={sop}\n            onChange={(event) => {\n              if (\n                event.target.value.split(\" \").filter(function (n) {\n                  return n !== \"\";\n                }).length <= 250\n              ) {\n                setSop(event.target.value);\n              }\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => handleApply()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.button}\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst Home = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n\n  const getData = useCallback(() => {\n    let searchParams = [];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] !== 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] !== 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration !== \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(\n          response.data.filter((obj) => {\n            const today = new Date();\n            const deadline = new Date(obj.deadline);\n            return deadline > today;\n          })\n        );\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  }, [searchOptions, setPopup]);\n\n  useEffect(() => {\n    getData();\n  }, [getData]);\n\n  return (\n    <>\n      <Grid container style={{ padding: \"30px\", minHeight: \"93vh\" }}>\n  <Grid item xs={12}>\n    <Typography variant=\"h2\" style={{ fontFamily: 'Chillax-semibold, sans-serif', color: 'black', textAlign: 'center' }}>Jobs</Typography>\n  </Grid>\n  <Grid item xs={12} sm={6} md={3}>\n  <Paper \n    sx={{\n      padding: {\n        xs: \"12px\",\n        sm: \"20px\"\n      },\n      marginTop: \"20px\",\n      marginBottom: {\n        xs: \"16px\",\n        sm: \"0\"\n      }\n    }}\n  >\n    <Typography \n      variant=\"h6\"\n      sx={{\n        fontSize: {\n          xs: '1rem',\n          sm: '1.25rem'\n        },\n        marginBottom: '12px'\n      }}\n    >\n      Filter Options\n    </Typography>\n    <Grid \n      container \n      direction=\"column\" \n      spacing={{\n        xs: 2,\n        sm: 3\n      }}\n    >\n      <Grid item>\n        <TextField\n          label=\"Search Jobs\"\n          value={searchOptions.query}\n          onChange={(event) =>\n            setSearchOptions({\n              ...searchOptions,\n              query: event.target.value,\n            })\n          }\n          onKeyPress={(ev) => {\n            if (ev.key === \"Enter\") {\n              getData();\n            }\n          }}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment>\n                <IconButton \n                  onClick={() => getData()}\n                  size=\"small\"\n                >\n                  <SearchIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n          variant=\"outlined\"\n          fullWidth\n          size=\"small\"\n        />\n      </Grid>\n      <Grid item>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setFilterOpen(true)}\n          fullWidth\n          size=\"small\"\n          sx={{\n            padding: {\n              xs: '8px',\n              sm: '12px'\n            }\n          }}\n        >\n          More Filters\n        </Button>\n      </Grid>\n    </Grid>\n  </Paper>\n</Grid>\n  <Grid item xs={9}>\n    <Grid container direction=\"column\" alignItems=\"center\">\n      <Grid item xs>\n        {jobs.length > 0 ? (\n          jobs.map((job) => {\n            return <JobTile job={job} />;\n          })\n        ) : (\n          <Typography variant=\"h5\" style={{ textAlign: \"center\", fontFamily: 'Chillax-semibold, sans-serif', color: 'black' }}>\n            No jobs found\n          </Typography>\n        )}\n      </Grid>\n    </Grid>\n  </Grid>\n</Grid>\n<FilterPopup\n  open={filterOpen}\n  searchOptions={searchOptions}\n  setSearchOptions={setSearchOptions}\n  handleClose={() => setFilterOpen(false)}\n  getData={() => {\n    getData();\n    setFilterOpen(false);\n  }}\n/>\n</>\n  );\n}\n\nexport default Home;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Logout.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Profile.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Signup.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Navbar.js",["157","158"],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\MessagePopup.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\JobApplications.js",["159","160"],"import {\n  Avatar,\n  Button,\n  Checkbox,\n  Chip,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  makeStyles,\n  Modal,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList, { server } from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"80%\",\n  },\n  button: {\n    padding: '5px 15px',\n    fontSize: '0.875rem',\n    borderRadius: '20px',\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n\n  avatar: {\n    width: theme.spacing(17),\n    height: theme.spacing(17),\n  },\n  statusBlock: {\n    padding: '10px 20px',\n    fontSize: '0.875rem',\n    borderRadius: '20px',\n    color: '#ffffff',\n    '&.shortlisted': {\n      backgroundColor: '#3f51b5',\n      '&:hover': {\n        backgroundColor: '#303f9f',\n      },\n    },\n    '&.rejected': {\n      backgroundColor: '#f44336',\n      '&:hover': {\n        backgroundColor: '#d32f2f',\n      },\n    },\n    '&.accepted': {\n      backgroundColor: '#4caf50',\n      '&:hover': {\n        backgroundColor: '#388e3c',\n      },\n    },\n    '&.cancelled': {\n      backgroundColor: '#ff9800',\n      '&:hover': {\n        backgroundColor: '#f57c00',\n      },\n    },\n    '&.finished': {\n      backgroundColor: '#9e9e9e',\n      '&:hover': {\n        backgroundColor: '#757575',\n      },\n    },\n  },\n  smallButton: {\n    padding: '5px',\n    fontSize: '0.875rem',\n    borderRadius: '50%',\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n}));\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Application Status\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"rejected\"\n                      checked={searchOptions.status.rejected}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Rejected\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"applied\"\n                      checked={searchOptions.status.applied}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Applied\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"shortlisted\"\n                      checked={searchOptions.status.shortlisted}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Shortlisted\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"name\"\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"name\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"name\">\n                    <Typography>Name</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"dateOfApplication\"\n                    checked={searchOptions.sort.dateOfApplication.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfApplication: {\n                            ...searchOptions.sort.dateOfApplication,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"dateOfApplication\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"dateOfApplication\">\n                    <Typography>Date of Application</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.dateOfApplication.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfApplication: {\n                            ...searchOptions.sort.dateOfApplication,\n                            desc: !searchOptions.sort.dateOfApplication.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.dateOfApplication.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\n                              .desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n\n  const appliedOn = new Date(application.dateOfApplication);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n  };\n\n  const getResume = () => {\n    if (application.jobApplicant.resume && application.jobApplicant.resume !== \"\") {\n      const address = `${server}/api/download/resume/${application.jobApplicant.resume}`;\n      console.log(address);\n      axios(address, {\n        method: \"GET\",\n        responseType: \"blob\",\n      })\n        .then((response) => {\n          const file = new Blob([response.data], { type: \"application/pdf\" });\n          const fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        })\n        .catch((error) => {\n          console.log(error);\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: \"Error downloading resume\",\n          });\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"No resume found\",\n      });\n    }\n  };\n\n  const updateStatus = (status) => {\n    const address = `${apiList.applications}/${application._id}`;\n    const statusData = {\n      status: status,\n      dateOfJoining: new Date().toISOString(),\n    };\n    axios\n      .put(address, statusData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  const buttonSet = {\n    applied: (\n      <>\n        <Grid item xs>\n          <Button\n            className={`${classes.statusBlock} shortlisted`}\n            onClick={() => updateStatus(\"shortlisted\")}\n          >\n            Shortlist\n          </Button>\n        </Grid>\n        <Grid item xs>\n          <Button\n            className={`${classes.statusBlock} rejected`}\n            onClick={() => updateStatus(\"rejected\")}\n          >\n            Reject\n          </Button>\n        </Grid>\n      </>\n    ),\n    shortlisted: (\n      <>\n        <Grid item xs>\n          <Button\n            className={`${classes.statusBlock} accepted`}\n            onClick={() => updateStatus(\"accepted\")}\n          >\n            Accept\n          </Button>\n        </Grid>\n        <Grid item xs>\n          <Button\n            className={`${classes.statusBlock} rejected`}\n            onClick={() => updateStatus(\"rejected\")}\n          >\n            Reject\n          </Button>\n        </Grid>\n      </>\n    ),\n    rejected: (\n      <>\n        <Grid item xs>\n          <Paper className={`${classes.statusBlock} rejected`}>\n            Rejected\n          </Paper>\n        </Grid>\n      </>\n    ),\n    accepted: (\n      <>\n        <Grid item xs>\n          <Paper className={`${classes.statusBlock} accepted`}>\n            Accepted\n          </Paper>\n        </Grid>\n      </>\n    ),\n    cancelled: (\n      <>\n        <Grid item xs>\n          <Paper className={`${classes.statusBlock} cancelled`}>\n            Cancelled\n          </Paper>\n        </Grid>\n      </>\n    ),\n    finished: (\n      <>\n        <Grid item xs>\n          <Paper className={`${classes.statusBlock} finished`}>\n            Finished\n          </Paper>\n        </Grid>\n      </>\n    ),\n  };\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid\n          item\n          xs={2}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Avatar\n            src={`${server}${application.jobApplicant.profile}`}\n            className={classes.avatar}\n          />\n        </Grid>\n        <Grid container item xs={7} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">\n              {application.jobApplicant.name}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Rating\n              value={\n                application.jobApplicant.rating !== -1\n                  ? application.jobApplicant.rating\n                  : null\n              }\n              readOnly\n            />\n          </Grid>\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\n          <Grid item>\n            Education:{\" \"}\n            {application.jobApplicant.education\n              .map((edu) => {\n                return `${edu.institutionName} (${edu.startYear}-${\n                  edu.endYear ? edu.endYear : \"Ongoing\"\n                })`;\n              })\n              .join(\", \")}\n          </Grid>\n          <Grid item>\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\n          </Grid>\n          <Grid item>\n            {application.jobApplicant.skills.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              color=\"primary\"\n              onClick={() => getResume()}\n            >\n              Download Resume\n            </Button>\n          </Grid>\n          <Grid item container xs>\n            {buttonSet[application.status]}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            // onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst JobApplications = (props) => {\n    const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n  const { jobId } = useParams();\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    status: {\n      all: false,\n      applied: false,\n      shortlisted: false,\n    },\n    sort: {\n      \"jobApplicant.name\": {\n        status: false,\n        desc: false,\n      },\n      dateOfApplication: {\n        status: true,\n        desc: true,\n      },\n      \"jobApplicant.rating\": {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const getData = useCallback(() => {\n    let searchParams = [];\n\n    if (searchOptions.status.rejected) {\n      searchParams = [...searchParams, `status=rejected`];\n    }\n    if (searchOptions.status.applied) {\n      searchParams = [...searchParams, `status=applied`];\n    }\n    if (searchOptions.status.shortlisted) {\n      searchParams = [...searchParams, `status=shortlisted`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = `${apiList.applicants}?jobId=${jobId}`;\n    if (queryString !== \"\") {\n      address = `${address}&${queryString}`;\n    }\n\n    console.log(address);\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setApplications([]);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n      });\n  }, [searchOptions, jobId, setPopup]);\n\n  useEffect(() => {\n    getData();\n  }, [getData]);\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Applications</Typography>\n        </Grid>\n        <Grid item>\n          <IconButton className={classes.smallButton} onClick={() => setFilterOpen(true)}>\n            <FilterListIcon />\n          </IconButton>\n        </Grid>\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          style={{ width: \"100%\" }}\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {applications.length > 0 ? (\n            applications.map((obj) => (\n              <Grid item>\n                {/* {console.log(obj)} */}\n                <ApplicationTile application={obj} getData={getData} />\n              </Grid>\n            ))\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No Applications Found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default JobApplications;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\CreateJobs.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\isAuth.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\Profile.js",["161","162","163"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        setPhone(response.data.contactNumber);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const handleUpdate = () => {\n    let updatedDetails = {\n      ...profileDetails,\n    };\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Profile</Typography>\n        </Grid>\n        <Grid item xs style={{ width: \"100%\" }}>\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              //   width: \"60%\",\n            }}\n          >\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\n              <Grid item>\n                <TextField\n                  label=\"Name\"\n                  value={profileDetails.name}\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                  style={{ width: \"100%\" }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Bio (upto 250 words)\"\n                  multiline\n                  rows={8}\n                  style={{ width: \"100%\" }}\n                  variant=\"outlined\"\n                  value={profileDetails.bio}\n                  onChange={(event) => {\n                    if (\n                      event.target.value.split(\" \").filter(function (n) {\n                        return n != \"\";\n                      }).length <= 250\n                    ) {\n                      handleInput(\"bio\", event.target.value);\n                    }\n                  }}\n                />\n              </Grid>\n              <Grid\n                item\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <PhoneInput\n                  country={\"in\"}\n                  value={phone}\n                  onChange={(phone) => setPhone(phone)}\n                  style={{ width: \"auto\" }}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n              onClick={() => handleUpdate()}\n            >\n              Update Details\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\MyJobs.js",["164"],"import {\n  Button,\n  Checkbox,\n  Chip,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  Modal,\n  Paper,\n  Slider,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  button: {\n    padding: '5px 15px',\n    fontSize: '0.875rem',\n    borderRadius: '20px',\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const { job, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [openUpdate, setOpenUpdate] = useState(false);\n  const [jobDetails, setJobDetails] = useState(job);\n\n  console.log(jobDetails);\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleClick = (location) => {\n    navigate(location);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseUpdate = () => {\n    setOpenUpdate(false);\n  };\n\n  const handleDelete = () => {\n    console.log(job._id);\n    axios\n      .delete(`${apiList.jobs}/${job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const handleJobUpdate = () => {\n    axios\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleCloseUpdate();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleCloseUpdate();\n      });\n  };\n\n  const postedOn = new Date(job.dateOfPosting);\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{job.title}</Typography>\n          </Grid>\n          <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid>\n          <Grid item>Role : {job.jobType}</Grid>\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\n          <Grid item>\n            Duration :{\" \"}\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n          </Grid>\n          <Grid item>Date Of Posting: {postedOn.toLocaleDateString()}</Grid>\n          <Grid item>Number of Applicants: {job.maxApplicants}</Grid>\n          <Grid item>\n            Remaining Number of Positions:{\" \"}\n            {job.maxPositions - job.acceptedCandidates}\n          </Grid>\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item xs>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              onClick={() => handleClick(`/job/applications/${job._id}`)}\n            >\n              View Applications\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpenUpdate(true);\n              }}\n              style={{\n                background: \"#FC7A1E\",\n                color: \"#fff\",\n              }}\n            >\n              Update Details\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              Delete Job\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Are you sure?\n          </Typography>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleDelete()}\n              >\n                Delete\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleClose()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n      <Modal\n        open={openUpdate}\n        onClose={handleCloseUpdate}\n        className={classes.popupDialog}\n      >\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Update Details\n          </Typography>\n          <Grid\n  item\n  container\n  direction=\"column\"\n  justifyContent=\"center\"\n  alignItems=\"center\"\n>\n            <Grid item>\n              <TextField\n                label=\"Application Deadline\"\n                type=\"datetime-local\"\n                value={jobDetails.deadline.substr(0, 16)}\n                onChange={(event) => {\n                  handleInput(\"deadline\", event.target.value);\n                }}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Maximum Number Of Applicants\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxApplicants}\n                onChange={(event) => {\n                  handleInput(\"maxApplicants\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Positions Available\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxPositions}\n                onChange={(event) => {\n                  handleInput(\"maxPositions\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n          <Grid\n  container\n  item\n  xs\n  direction=\"column\"\n  alignItems=\"stretch\"\n  justifyContent=\"center\"\n>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleJobUpdate()}\n              >\n                Update\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleCloseUpdate()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justifyContent=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst MyJobs = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n\n  const getData = useCallback(() => {\n    let searchParams = [`myjobs=1`];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] !== 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] !== 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration !== \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    console.log(address);\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  }, [searchOptions, setJobs, setPopup]);\n\n  useEffect(() => {\n    getData();\n  }, [getData]);\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs>\n            <Typography variant=\"h2\">My Jobs</Typography>\n          </Grid>\n          <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'center' }}>\n  <TextField\n    label=\"Search Jobs\"\n    value={searchOptions.query}\n    onChange={(event) =>\n      setSearchOptions({\n        ...searchOptions,\n        query: event.target.value,\n      })\n    }\n    onKeyPress={(ev) => {\n      if (ev.key === \"Enter\") {\n        getData();\n      }\n    }}\n    InputProps={{\n      endAdornment: (\n        <InputAdornment>\n          <IconButton \n            onClick={() => getData()}\n            size=\"small\"\n          >\n            <SearchIcon />\n          </IconButton>\n        </InputAdornment>\n      ),\n    }}\n    sx={{\n      width: {\n        xs: '95%',    // Mobile\n        sm: '800px',  // Tablet\n        md: '900px',  // Small Desktop\n        lg: '1000px', // Large Desktop\n      },\n      maxWidth: '1200px',\n      my: { xs: 1, sm: 2 }\n    }}\n    variant=\"outlined\"\n    size=\"small\"\n  />\n</Grid>\n          <Grid item>\n            <IconButton onClick={() => setFilterOpen(true)}>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {jobs.length > 0 ? (\n            jobs.map((job) => {\n              return <JobTile job={job} getData={getData} />;\n            })\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No jobs found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default MyJobs;\n","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Welcome.js",["165"],"import { Typography } from \"@material-ui/core\";\nimport { motion } from \"framer-motion\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Hero from \"../assets/Hero.png\";\nimport { useAnimations } from \"../Hooks/useAnimations\";\nimport { Accordion } from \"./query\";\nimport { Services } from \"./services\";\n// Styled components for the layout\nconst WelcomeStyles = styled(motion.div)`\n  min-height: 90vh;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 2rem;\n  background-color: white;\n  position: relative; /* Added to position the widget */\n\n  @media (max-width: 1200px) {\n    flex-wrap: wrap;\n  }\n\n  .welcome-description {\n    width: 50%;\n    @media (max-width: 1200px) {\n      width: 100%;\n    }\n    \n    .title {\n      font-family: \"Chillax-semibold\", sans-serif;\n      font-weight: bold;\n      font-size: 2.5rem;\n      margin-bottom: 1.5rem;\n      color: #333;\n\n      @media (max-width: 400px) {\n        font-size: 1.5rem;\n      }\n\n      span {\n        color: #768cff;\n      }\n    }\n\n    .subtitle {\n      font-family: \"chillax\", sans-serif;\n      font-size: 1.2rem;\n      margin-bottom: 2rem;\n      color: #666;\n    }\n\n    button {\n      font-family: \"chillax\", sans-serif;\n      font-weight: lighter;\n      font-size: 1rem;\n      border: 1px solid #768cff;\n      padding: 0.5rem 1rem;\n      border-radius: 5px;\n      background-color: transparent;\n      color: black;\n      cursor: pointer;\n      transition: 0.3s all ease;\n\n      &:hover {\n        background-color: lightblue;\n        transition: 0.3s all ease;\n      }\n    }\n  }\n\n  .welcome-photo {\n    width: 45%;\n    overflow: hidden;\n\n    @media (max-width: 1200px) {\n      display: none;\n    }\n\n    img {\n      width: 100%;\n    }\n  }\n\n  .welcome-photo-mobile {\n    display: none;\n\n    @media (max-width: 1200px) {\n      display: block;\n      position: absolute;\n      width: 100%;\n      top: 50%;\n      left: 0;\n      transform: translateY(-50%);\n      opacity: 0.2;\n      z-index: -1;\n    }\n\n    img {\n      width: 100%;\n    }\n  }\n\n  .chipp-chat-widget {\n    position: absolute;\n    right: 0;\n    bottom: 10px; /* Adjusted to bring the widget slightly upwards */\n    z-index: 1000;\n  }\n`;\n\nconst SectionContainer = styled.div`\n  margin-left: 1rem; /* Adjust margin as needed */\n  margin-right: 1rem; /* Adjust margin as needed */\n  padding-right: 3rem; /* Adjust padding as needed */\n`;\n\nconst Welcome = () => {\n  const { heroPictureAnimation, titleAnimation, lineContainerAnimation, heroStagger } = useAnimations();\n\n  {/*useEffect(() => {\n    const script1 = document.createElement(\"script\");\n    script1.src = \"https://storage.googleapis.com/chipp-chat-widget-assets/build/bundle.js\";\n    script1.defer = true;\n    document.body.appendChild(script1);\n\n    const link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href = \"https://storage.googleapis.com/chipp-chat-widget-assets/build/bundle.css\";\n    document.head.appendChild(link);\n\n    window.CHIPP_APP_URL = \"https://talentedai-15534.chipp.ai\";\n    window.CHIPP_APP_ID = 15534;\n\n    return () => {\n      document.body.removeChild(script1);\n      document.head.removeChild(link);\n    };\n  }, []);*/}\n\n  return (\n    <>\n      <SectionContainer>\n        <WelcomeStyles variants={heroStagger} initial=\"hidden\" animate=\"show\">\n          <motion.div\n            variants={heroStagger}\n            initial=\"hidden\"\n            animate=\"show\"\n            className=\"welcome-description\"\n          >\n            <motion.div className=\"title\" variants={titleAnimation}>\n              <motion.div variants={lineContainerAnimation} className=\"hide\">\n                <motion.h2 variants={titleAnimation}>\n                  Connecting Talent with Opportunities through <span>Innovative Job Solutions</span>\n                </motion.h2>\n              </motion.div>\n              <motion.div variants={titleAnimation} className=\"subtitle\">\n                <Typography variant=\"body1\" style={{ fontSize: \"1.5rem\", color: \"#666\", textAlign: \"center\" }}>\n                  Discover your dream job and take the next step in your career with our platform. We streamline the hiring process for both candidates and recruiters, ensuring a seamless experience.\n                </Typography>\n              </motion.div>\n              <motion.div variants={titleAnimation}>\n                <button>Learn More</button>\n              </motion.div>\n            </motion.div>\n          </motion.div>\n          <motion.div\n            variants={heroPictureAnimation}\n            initial=\"hidden\"\n            animate=\"show\"\n            className=\"welcome-photo\"\n          >\n            <img src={Hero} alt=\"Hero\" />\n          </motion.div>\n          <div className=\"welcome-photo-mobile\">\n            <img src={Hero} alt=\"Hero\" />\n          </div>\n          {/*<div className=\"chipp-chat-widget\"></div>*/}\n        </WelcomeStyles>\n      </SectionContainer>\n      <SectionContainer>\n        <Services />\n      </SectionContainer>\n      <SectionContainer>\n        <Accordion />\n      </SectionContainer>\n    </>\n  );\n};\n\nexport default Welcome;\n\nexport const ErrorPage = (props) => {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-8\">\n      <div className=\"bg-white shadow-md rounded-lg p-8 max-w-2xl w-full text-center\">\n        <Typography variant=\"h2\" className=\"text-4xl font-bold text-gray-900 mb-4\">\n          Error 404\n        </Typography>\n        <Typography variant=\"body1\" className=\"text-gray-600\">\n          The page you are looking for does not exist. Please check the URL or return to the homepage.\n        </Typography>\n      </div>\n    </div>\n  );\n};","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\apiList.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\PasswordInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\FileUploadInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\EmailInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useAnimations.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\services.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\servicecard.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Wave.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\ServiceCardsData.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useScroll.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\query.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\AccordionData.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AccordionItem.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\agent.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruteragent.js",["166"],"import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport sanitizeHtml from 'sanitize-html';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    gap: '2rem',\n    padding: '5vh 1rem',\n    width: '100%',\n    maxWidth: '100%',\n    boxSizing: 'border-box',\n  },\n  contentContainer: {\n    display: 'flex',\n    gap: '2rem',\n    width: '100%',\n    maxWidth: '1200px',\n    '@media (max-width: 768px)': {\n      flexDirection: 'column',\n      gap: '1rem',\n    },\n  },\n  formContainer: {\n    width: '500px',\n    height: '600px',\n    border: '1px solid #e2e8f0',\n    borderRadius: '0.5rem',\n    overflow: 'hidden',\n    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    '@media (max-width: 768px)': {\n      width: '100%',\n      height: 'auto',\n      minHeight: '500px',\n    },\n  },\n  innerContainer: {\n    padding: '1.5rem',\n    '@media (max-width: 768px)': {\n      padding: '1rem',\n    },\n  },\n  title: {\n    fontWeight: 'bold',\n    fontSize: '1.25rem',\n    marginBottom: '0.5rem',\n    '@media (max-width: 768px)': {\n      fontSize: '1.1rem',\n    },\n  },\n  formGroup: {\n    marginBottom: '1rem',\n    paddingRight: '1rem',\n    '@media (max-width: 768px)': {\n      paddingRight: '0',\n    },\n  },\n  label: {\n    display: 'block',\n    color: '#4a5568',\n    fontSize: '0.875rem',\n    fontWeight: 'bold',\n    marginBottom: '0.5rem',\n  },\n  input: {\n    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n    border: '1px solid #e2e8f0',\n    borderRadius: '0.375rem',\n    width: '100%',\n    padding: '0.5rem 0.75rem',\n    color: '#4a5568',\n    lineHeight: '1.25',\n    boxSizing: 'border-box',\n    '&:focus': {\n      outline: 'none',\n      boxShadow: '0 0 0 3px rgba(66, 153, 225, 0.5)',\n    },\n  },\n  buttonContainer: {\n    padding: '1.5rem',\n    '@media (max-width: 768px)': {\n      padding: '1rem',\n    },\n  },\n  button: {\n    backgroundColor: '#4299e1',\n    color: 'white',\n    fontWeight: 'bold',\n    padding: '0.5rem 1rem',\n    borderRadius: '0.375rem',\n    width: '100%',\n    '&:hover': {\n      backgroundColor: '#2b6cb0',\n    },\n    '&:focus': {\n      outline: 'none',\n      boxShadow: '0 0 0 3px rgba(66, 153, 225, 0.5)',\n    },\n  },\n  jobDescriptionContainer: {\n    width: '500px',\n    height: '570px',\n    fontSize: '0.75rem',\n    color: '#718096',\n    padding: '1rem',\n    border: '1px solid #e2e8f0',\n    borderRadius: '0.5rem',\n    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    whiteSpace: 'pre-line',\n    overflowY: 'auto',\n    '@media (max-width: 768px)': {\n      width: '90%',\n      height: '400px',\n    },\n  },\n  pageTitle: {\n    fontFamily: \"Chillax-semibold, sans-serif\",\n    '@media (max-width: 768px)': {\n      fontSize: '1.75rem',\n    },\n  },\n  loaderContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  errorMessage: {\n    color: 'red',\n    fontWeight: 'bold',\n    marginTop: '1rem',\n  },\n});\n\nconst JobForm = ({ onSubmit }) => {\n  const classes = useStyles();\n  const [companyDescription, setCompanyDescription] = useState(\"\");\n  const [candidateInfo, setCandidateInfo] = useState(\"\");\n  const [jobDescription, setJobDescription] = useState(\"\");\n\n  const handleSubmit = () => {\n    const jobData = {\n      companyDescription,\n      candidateInfo,\n      jobDescription,\n    };\n    onSubmit(jobData);\n  };\n\n  return (\n    <div className={classes.formContainer}>\n      <div className={classes.innerContainer}>\n        <div className={classes.title}>Job Hiring Agent</div>\n        <div className={classes.formGroup}>\n          <label className={classes.label} htmlFor=\"companyDescription\">\n            Company Description\n          </label>\n          <textarea\n            className={classes.input}\n            id=\"companyDescription\"\n            placeholder=\"Enter company description\"\n            value={companyDescription}\n            onChange={(e) => setCompanyDescription(e.target.value)}\n          />\n        </div>\n        <div className={classes.formGroup}>\n          <label className={classes.label} htmlFor=\"candidateInfo\">\n            Candidate Information\n          </label>\n          <textarea\n            className={classes.input}\n            id=\"candidateInfo\"\n            placeholder=\"Enter candidate information\"\n            value={candidateInfo}\n            onChange={(e) => setCandidateInfo(e.target.value)}\n          />\n        </div>\n        <div className={classes.formGroup}>\n          <label className={classes.label} htmlFor=\"jobDescription\">\n            Job Description\n          </label>\n          <textarea\n            className={classes.input}\n            id=\"jobDescription\"\n            placeholder=\"Enter job description\"\n            value={jobDescription}\n            onChange={(e) => setJobDescription(e.target.value)}\n          />\n        </div>\n        <div className={classes.buttonContainer}>\n          <button\n            className={classes.button}\n            type=\"button\"\n            onClick={handleSubmit}\n          >\n            Generate\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction JobAssistant() {\n  const classes = useStyles();\n  const [jobData, setJobData] = useState(null);\n  const [jobText, setJobText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      navigate(\"/login\");\n    }\n  }, [navigate]);\n\n  const onSubmit = async (data) => {\n    setLoading(true);\n    setJobText('');\n    setError(null);\n    setJobData(data);\n\n    try {\n      const response = await fetch('https://talented-ai-api.vercel.app/api/suggest-candidate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      setJobText(result.evaluation);\n    } catch (error) {\n      console.error('Error generating evaluation:', error);\n      setError('Failed to generate evaluation. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sanitizedText = sanitizeHtml(jobText, {\n    allowedTags: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'ul', 'ol', 'li', 'strong', 'em'],\n    allowedAttributes: {}\n  });\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h2\" align=\"center\" style={{ fontFamily: \"Chillax-semibold, sans-serif\" }}>\n        Recruiter Agent\n      </Typography>\n      <div className={classes.contentContainer}>\n        <JobForm onSubmit={onSubmit} />\n        <div className={classes.jobDescriptionContainer}>\n          {loading ? (\n            <div className={classes.loaderContainer}>\n              <div className=\"loader\"></div>\n              <span>Loading...</span>\n            </div>\n          ) : (\n            <div>\n              {error && <div className={classes.errorMessage}>{error}</div>}\n              <div dangerouslySetInnerHTML={{ __html: sanitizedText }} />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default JobAssistant;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\ai-interview.js",["167","168","169","170"],"import { Avatar, CircularProgress, LinearProgress, Typography } from '@material-ui/core';\nimport { createTheme, makeStyles } from '@material-ui/core/styles';\nimport { Android, Person } from '@material-ui/icons';\nimport React, { useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { Bar, BarChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\n\nconst theme = createTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 600,\n      md: 960,\n      lg: 1280,\n      xl: 1920,\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    gap: '2rem',\n    paddingTop: '5vh',\n    width: '100%',\n    maxWidth: '600px',\n    margin: '0 auto',\n    padding: '0 1rem',\n    [theme.breakpoints.down('sm')]: {\n      height: 'calc(100vh - 100px)',\n      paddingTop: '2vh',\n      gap: '1rem',\n      margin: '0 15px', // Add horizontal margins for small screens\n      width: 'calc(100% - 30px)', // Adjust width to account for margins\n      maxWidth: 'none',\n    },\n  },\n  contentContainer: {\n    display: 'flex',\n    gap: '2rem',\n    width: '100%',\n    justifyContent: 'center', // Center content\n    transition: 'all 0.3s ease', // Smooth transition\n    [theme.breakpoints.down('sm')]: {\n      gap: '1rem',\n      flexDirection: 'column',\n    },\n  },\n  formContainer: {\n    width: '100%',\n    maxWidth: '500px',\n    height: 'auto',\n    minHeight: '400px',\n    border: '1px solid #e2e8f0',\n    borderRadius: '0.5rem',\n    overflow: 'hidden',\n    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)',\n    [theme.breakpoints.down('sm')]: {\n      maxWidth: '100%',\n    },\n  },\n  innerContainer: {\n    margin: '2rem',\n    width: 'auto',\n    [theme.breakpoints.down('sm')]: {\n      margin: '1rem',\n    },\n  },\n  chatContainer: {\n    width: '100%',\n    height: '600px',\n    display: 'flex',\n    flexDirection: 'column',\n    border: '1px solid #e2e8f0',\n    borderRadius: '0.5rem',\n    transition: 'all 0.3s ease',\n    opacity: 1,\n    visibility: 'visible',\n    [theme.breakpoints.down('sm')]: {\n      height: 'calc(100vh - 200px)',\n    },\n    '&.hidden': {\n      opacity: 0,\n      visibility: 'hidden',\n      height: 0,\n      margin: 0,\n      padding: 0,\n    }\n  },\n  chatMessages: {\n    textAlign: 'left',\n    flex: 1,\n    overflowY: 'auto',\n    padding: '1rem',\n    [theme.breakpoints.down('sm')]: {\n      padding: '0.5rem',\n    },\n  },\n  messageContent: {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '70%',\n    [theme.breakpoints.down('sm')]: {\n      maxWidth: '80%',\n    },\n  },\n  messageBox: {\n    padding: '1rem',\n    borderRadius: '0.5rem',\n    maxWidth: '100%',\n    wordBreak: 'break-word',\n    [theme.breakpoints.down('sm')]: {\n      padding: '0.75rem',\n      fontSize: '0.9rem',\n    },\n  },\n  inputContainer: {\n    padding: '1rem',\n    borderTop: '1px solid #e2e8f0',\n    [theme.breakpoints.down('sm')]: {\n      padding: '0.5rem',\n    },\n  },\n  input: {\n    width: '95%',\n    padding: '0.75rem',\n    borderRadius: '0.375rem',\n    border: '1px solid #e2e8f0',\n    '&:focus': {\n      outline: 'none',\n      borderColor: '#3b82f6',\n    },\n    [theme.breakpoints.down('sm')]: {\n      \n      width: '100%',\n      padding: '0.5rem',\n    },\n  },\n  scoreContainer: {\n    position: 'fixed',\n    top: '1rem',\n    right: '1rem',\n    padding: '0.5rem 1rem',\n    backgroundColor: '#10b981',\n    color: 'white',\n    borderRadius: '0.5rem',\n    fontWeight: 'bold',\n    zIndex: 1000,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.8rem',\n      padding: '0.25rem 0.75rem',\n    },\n  },\n  title: {\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    marginBottom: '1.5rem',\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '1.25rem',\n      marginBottom: '1rem',\n    },\n  },\n\n  button: {\n    width: '100%',\n    padding: '0.75rem 1.5rem',\n    backgroundColor: '#3b82f6',\n    color: 'white',\n    border: 'none',\n    borderRadius: '0.375rem',\n    fontSize: '1rem',\n    fontWeight: '500',\n    cursor: 'pointer',\n    transition: 'all 0.2s ease',\n    marginTop: '1.5rem',\n    '&:hover': {\n      backgroundColor: '#2563eb',\n      transform: 'translateY(-1px)',\n      boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n    },\n    '&:active': {\n      transform: 'translateY(0)',\n    },\n    '&:disabled': {\n      backgroundColor: '#93c5fd',\n      cursor: 'not-allowed',\n    },\n},\nmessageRow: {\n  display: 'flex',\n  alignItems: 'flex-start',\n  marginBottom: '1rem',\n  gap: '0.5rem',\n},\n\nmessageRowReverse: {\n  display: 'flex',\n  alignItems: 'flex-start',\n  marginBottom: '1rem',\n  gap: '0.5rem',\n  flexDirection: 'row-reverse',\n},\n\nmessageContent: {\n  display: 'flex',\n  flexDirection: 'column',\n  maxWidth: '70%',\n},\n\nmessageAvatar: {\n  width: '40px',\n  height: '40px',\n  backgroundColor: '#e5e7eb',\n  '& .MuiSvgIcon-root': {\n    width: '24px',\n    height: '24px',\n  },\n},\n\naiAvatar: {\n  backgroundColor: '#3b82f6',\n  color: 'white',\n},\n\nuserAvatar: {\n  backgroundColor: '#10b981',\n},\n\nmessageBox: {\n  padding: '1rem',\n  borderRadius: '0.5rem',\n  maxWidth: '100%',\n  wordBreak: 'break-word',\n},\n\naiMessage: {\n  backgroundColor: '#f3f4f6',\n  borderTopLeftRadius: 0,\n},\n\nuserMessage: {\n  backgroundColor: '#10b981',\n  color: 'white',\n  borderTopRightRadius: 0,\n},\nh2: {\n  fontSize: '2rem',\n  [theme.breakpoints.down('sm')]: {\n    fontSize: '1.5rem',\n    marginBottom: '1rem',\n  },\n},\nprogressContainer: {\n  width: '100%', // Fixed width for progress\n  padding: '2rem',\n  backgroundColor: '#fff',\n  borderRadius: '0.5rem',\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n  transition: 'all 0.3s ease',\n  opacity: 0,\n  visibility: 'hidden',\n  height: 0,\n  '&.visible': {\n    opacity: 1,\n    visibility: 'visible',\n    height: 'auto',\n  },\n  [theme.breakpoints.down('sm')]: {\n    width: '100%',\n  }\n},\nquestionProgress: {\n  marginBottom: '1.5rem',\n},\nprogressLabel: {\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginBottom: '0.5rem',\n  fontSize: '0.875rem',\n  color: '#4a5568',\n},\nchartContainer: {\n  width: '100%',\n  height: '300px',\n  marginTop: '2rem',\n},\nsummaryStats: {\n  display: 'grid',\n  gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',\n  gap: '1rem',\n  marginTop: '2rem',\n},\nstatCard: {\n  padding: '1rem',\n  backgroundColor: '#f8fafc',\n  borderRadius: '0.5rem',\n  textAlign: 'center',\n},\nstatValue: {\n  fontSize: '1.5rem',\n  fontWeight: 'bold',\n  color: '#2563eb',\n},\nstatLabel: {\n  fontSize: '0.875rem',\n  color: '#4a5568',\n},\n}));\nconst ProgressSummary = ({ questions, scores, answeredQuestions, totalQuestions }) => {\n  const classes = useStyles();\n\n  const chartData = questions.map((question, index) => ({\n    name: `Q${index + 1}`,\n    score: scores[index] || 0,\n  }));\n\n  const averageScore = Math.round(\n    scores.reduce((acc, score) => acc + score, 0) / scores.length\n  );\n\n  const strengthAreas = scores.filter(score => score >= 70).length;\n  const improvementAreas = scores.filter(score => score < 70).length;\n\n  return (\n<div className={`${classes.progressContainer} ${answeredQuestions === totalQuestions ? 'visible' : ''}`}>\n        <Typography variant=\"h6\" gutterBottom>\n        Assessment Progress Summary\n      </Typography>\n\n      <div className={classes.summaryStats}>\n        <div className={classes.statCard}>\n          <div className={classes.statValue}>{averageScore}%</div>\n          <div className={classes.statLabel}>Average Score</div>\n        </div>\n        <div className={classes.statCard}>\n          <div className={classes.statValue}>{strengthAreas}</div>\n          <div className={classes.statLabel}>Strong Areas</div>\n        </div>\n        <div className={classes.statCard}>\n          <div className={classes.statValue}>{improvementAreas}</div>\n          <div className={classes.statLabel}>Areas to Improve</div>\n        </div>\n      </div>\n\n      {questions.map((question, index) => (\n        <div key={index} className={classes.questionProgress}>\n          <div className={classes.progressLabel}>\n            <span>Question {index + 1}</span>\n            <span>{scores[index]}%</span>\n          </div>\n          <LinearProgress\n            variant=\"determinate\"\n            value={scores[index]}\n            color={scores[index] >= 70 ? \"primary\" : \"secondary\"}\n          />\n        </div>\n      ))}\n\n      <div className={classes.chartContainer}>\n        <ResponsiveContainer>\n          <BarChart data={chartData}>\n            <XAxis dataKey=\"name\" />\n            <YAxis domain={[0, 100]} />\n            <Tooltip />\n            <Bar\n              dataKey=\"score\"\n              fill=\"#3b82f6\"\n              radius={[4, 4, 0, 0]}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\n// SkillAssessmentForm Component\nconst SkillAssessmentForm = ({ onStart }) => {\n  const classes = useStyles();\n  const [formData, setFormData] = useState({\n    skillName: '',\n    skillLevel: 'beginner',\n    exerciseType: 'coding',\n    focusArea: ''\n  });\n\n  const [errors, setErrors] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const skillOptions = [\n    { value: 'javascript', label: 'JavaScript', areas: ['Frontend', 'Backend', 'Algorithms'] },\n    { value: 'python', label: 'Python', areas: ['Data Science', 'Backend', 'Automation'] },\n    { value: 'react', label: 'React', areas: ['Components', 'Hooks', 'State Management'] },\n    { value: 'algorithms', label: 'Algorithms', areas: ['Sorting', 'Searching', 'Dynamic Programming'] }\n  ];\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    try {\n      const requestBody = {\n        jobTitle: formData.skillName,\n        skills: formData.focusArea,\n        experience: formData.skillLevel === 'beginner' ? 0 : \n                   formData.skillLevel === 'intermediate' ? 3 : 5,\n        currentQuestion: 0,\n        exerciseType: formData.exerciseType\n      };\n  \n      const response = await fetch('http://localhost:4444/api/get-interview-question', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(requestBody)\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n      }\n  \n      const data = await response.json();\n      \n      if (!data.question) {\n        throw new Error('Invalid question format received');\n      }\n  \n      onStart({\n        ...formData,\n        initialQuestion: data\n      });\n    } catch (error) {\n      console.error('Error starting assessment:', error);\n      setErrors({ \n        submit: 'Failed to start assessment. Please try again.' \n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className={classes.formContainer}>\n      <div className={classes.innerContainer}>\n        <div className={classes.title}>Interactive Skill Assessment</div>\n        \n        <div className={classes.formGroup}>\n          <label className={classes.label}>Select Skill</label>\n          <select\n            className={classes.input}\n            value={formData.skillName}\n            onChange={(e) => {\n              const skill = skillOptions.find(s => s.value === e.target.value);\n              setFormData({\n                ...formData,\n                skillName: e.target.value,\n                focusArea: skill?.areas[0] || ''\n              });\n            }}\n          >\n            <option value=\"\">Select a skill...</option>\n            {skillOptions.map(skill => (\n              <option key={skill.value} value={skill.value}>\n                {skill.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {formData.skillName && (\n          <div className={classes.formGroup}>\n            <label className={classes.label}>Focus Area</label>\n            <select\n              className={classes.input}\n              value={formData.focusArea}\n              onChange={(e) => setFormData({...formData, focusArea: e.target.value})}\n            >\n              {skillOptions\n                .find(s => s.value === formData.skillName)\n                ?.areas.map(area => (\n                  <option key={area} value={area}>{area}</option>\n                ))}\n            </select>\n          </div>\n        )}\n\n        <div className={classes.formGroup}>\n          <label className={classes.label}>Skill Level</label>\n          <select\n            className={classes.input}\n            value={formData.skillLevel}\n            onChange={(e) => setFormData({...formData, skillLevel: e.target.value})}\n          >\n            <option value=\"beginner\">Beginner</option>\n            <option value=\"intermediate\">Intermediate</option>\n            <option value=\"advanced\">Advanced</option>\n          </select>\n        </div>\n\n        <div className={classes.formGroup}>\n          <label className={classes.label}>Exercise Type</label>\n          <select\n            className={classes.input}\n            value={formData.exerciseType}\n            onChange={(e) => setFormData({...formData, exerciseType: e.target.value})}\n          >\n            <option value=\"coding\">Interactive Coding</option>\n            <option value=\"concept\">Concept Practice</option>\n            <option value=\"debugging\">Debug Challenge</option>\n          </select>\n        </div>\n\n        {errors.submit && (\n          <div className={classes.error}>{errors.submit}</div>\n        )}\n\n        <button\n          className={classes.button}\n          onClick={handleSubmit}\n          disabled={loading || !formData.skillName}\n        >\n          {loading ? <CircularProgress size={24} color=\"inherit\" /> : 'Start Learning'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst ChatInterface = ({ messages, onSendMessage, loading, answeredQuestions, totalQuestions }) => {\n  const classes = useStyles();\n  const [answer, setAnswer] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (answer.trim()) {\n      onSendMessage(answer);\n      setAnswer(\"\");\n    }\n  };\n\n  return (\n<div className={`${classes.chatContainer} ${answeredQuestions === totalQuestions ? 'hidden' : ''}`}>      <div className={classes.chatMessages}>\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            className={msg.type === 'ai' ? classes.messageRow : classes.messageRowReverse}\n          >\n            <Avatar className={`${classes.messageAvatar} ${\n              msg.type === 'ai' ? classes.aiAvatar : classes.userAvatar\n            }`}>\n              {msg.type === 'ai' ? <Android /> : <Person />}\n            </Avatar>\n            <div className={classes.messageContent}>\n              <div\n                className={`${classes.messageBox} ${\n                  msg.type === 'ai' ? classes.aiMessage : classes.userMessage\n                }`}\n              >\n                {msg.content}\n              </div>\n            </div>\n          </div>\n        ))}\n        {loading && (\n          <div className={classes.messageRow}>\n            <Avatar className={`${classes.messageAvatar} ${classes.aiAvatar}`}>\n              <Android />\n            </Avatar>\n            <CircularProgress size={24} />\n          </div>\n        )}\n      </div>\n      <form onSubmit={handleSubmit} className={classes.inputContainer}>\n        <input\n          className={classes.input}\n          value={answer}\n          onChange={(e) => setAnswer(e.target.value)}\n          placeholder=\"Type your answer...\"\n        />\n      </form>\n    </div>\n  );\n};\nfunction SkillAssessmentBot() {\n  const classes = useStyles();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [assessmentStarted, setAssessmentStarted] = useState(false);\n  const [score, setScore] = useState(0);\n  const [totalQuestions] = useState(5);\n  const [answeredQuestions, setAnsweredQuestions] = useState(0);\n  const [questionHistory, setQuestionHistory] = useState([]);\n  const [scoreHistory, setScoreHistory] = useState([]);\n\n  // Update state variable names\n  const [skillDetails, setSkillDetails] = useState({\n    skillName: '',\n    skillLevel: '',\n    focusArea: ''\n  });\n\n  const [currentQuestionData, setCurrentQuestionData] = useState(null);\n  const navigate = useNavigate();\n  const fetchWithRetry = async (url, options, maxRetries = 3) => {\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\n      try {\n        const response = await fetch(url, {\n          ...options,\n          credentials: 'include',\n          headers: {\n            ...options.headers,\n            'Accept': 'application/json',\n          }\n        });\n  \n        const data = await response.json();\n  \n        if (!response.ok) {\n          throw new Error(data.error || `HTTP error! status: ${response.status}`);\n        }\n  \n        return data;\n      } catch (error) {\n        if (attempt === maxRetries - 1) throw error;\n        await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt)));\n      }\n    }\n  };\n    const startAssessment = async (data) => {\n      setSkillDetails(data);\n      setAssessmentStarted(true);\n      setMessages([\n        {\n          type: 'ai',\n          content: `Welcome to your ${data.skillName} skill assessment. Let's begin with the first question.`\n        }\n      ]);\n      askQuestion(data);\n    };\n  \n    const askQuestion = async (data = skillDetails) => {\n      setLoading(true);\n      try {\n        const requestBody = {\n          jobTitle: data.skillName,\n          skills: data.focusArea,\n          experience: data.skillLevel === 'beginner' ? 0 : \n                     data.skillLevel === 'intermediate' ? 3 : 5,\n          currentQuestion: currentQuestion,\n          exerciseType: data.exerciseType\n        };\n    \n        const response = await fetchWithRetry(\n          'http://localhost:4444/api/get-interview-question',\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody)\n          }\n        );\n    \n        if (response.error) {\n          throw new Error(response.error);\n        }\n    \n        setCurrentQuestionData(response);\n        setMessages(prev => [...prev, {\n          type: 'ai',\n          content: response.question\n        }]);\n      } catch (error) {\n        console.error('Error fetching question:', error);\n        const fallbackQuestion = {\n          question: `Tell me about your experience with ${data.skillName}?`,\n          expectedAnswer: \"The answer should demonstrate practical experience and technical knowledge.\",\n          difficulty: data.skillLevel\n        };\n        setCurrentQuestionData(fallbackQuestion);\n        setMessages(prev => [...prev, {\n          type: 'ai',\n          content: fallbackQuestion.question\n        }]);\n      } finally {\n        setLoading(false);\n      }\n    };\nconst handleAnswer = async (answer) => {\n  if (!currentQuestionData) return;\n  \n  setMessages(prev => [...prev, {\n    type: 'user',\n    content: answer\n  }]);\n  \n  setLoading(true);\n  try {\n    const response = await fetch('http://localhost:4444/api/evaluate-answer', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        question: currentQuestionData.question,\n        expectedAnswer: currentQuestionData.expectedAnswer,\n        userAnswer: answer\n      }),\n    });\n    \n    const feedback = await response.json();\n    const numericScore = parseInt(feedback.score) || 0;\n    \n    // Update history\n    setQuestionHistory(prev => [...prev, currentQuestionData.question]);\n    setScoreHistory(prev => [...prev, numericScore]);\n    \n    setScore(prevScore => prevScore + numericScore);\n    setAnsweredQuestions(prev => prev + 1);\n    \n    setMessages(prev => [...prev, {\n      type: 'ai',\n      content: `${feedback.feedback}\\n\\nScore for this answer: ${numericScore}/100`\n    }]);\n\n    if (currentQuestion < totalQuestions - 1) {\n      setCurrentQuestion(prev => prev + 1);\n      askQuestion();\n    } else {\n      const finalScore = Math.round((score + numericScore) / totalQuestions);\n      setMessages(prev => [...prev, {\n        type: 'ai',\n        content: `Interview completed!\\n\\nFinal Score: ${finalScore}/100`\n      }]);\n    }\n  } catch (error) {\n    console.error('Error processing answer:', error);\n    setMessages(prev => [...prev, {\n      type: 'ai',\n      content: 'Sorry, there was an error evaluating your answer. Please try again.'\n    }]);\n  } finally {\n    setLoading(false);\n  }\n};\n\nreturn (\n  <div className={classes.container}>\n    <Typography variant=\"h2\" align=\"center\" className={classes.h2}>\n      Skill Assessment Bot\n    </Typography>\n    {score > 0 && answeredQuestions > 0 && (\n      <div className={classes.scoreContainer}>\n        Current Score: {Math.round(score / answeredQuestions)}/100\n      </div>\n    )}\n    <div className={classes.contentContainer}>\n      {!assessmentStarted ? (\n        <SkillAssessmentForm onStart={startAssessment} />\n      ) : (\n        <>\n          <ChatInterface\n            messages={messages}\n            onSendMessage={handleAnswer}\n            loading={loading}\n            answeredQuestions={answeredQuestions}\n  totalQuestions={totalQuestions}\n          />\n          {answeredQuestions === totalQuestions && (\n            <ProgressSummary \n              questions={questionHistory}\n              scores={scoreHistory}\n              answeredQuestions={answeredQuestions}\n  totalQuestions={totalQuestions}\n            />\n          )}\n        </>\n      )}\n    </div>\n  </div>\n);\n}\n  export default SkillAssessmentBot;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\resume.js",["171","172","173","174"],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":49,"column":3,"nodeType":"181","messageId":"182","endLine":49,"endColumn":9},{"ruleId":"183","severity":1,"message":"184","line":86,"column":11,"nodeType":"185","messageId":"186","endLine":86,"endColumn":35},{"ruleId":"183","severity":1,"message":"187","line":87,"column":10,"nodeType":"185","messageId":"186","endLine":87,"endColumn":19},{"ruleId":"179","severity":1,"message":"188","line":65,"column":3,"nodeType":"181","messageId":"182","endLine":65,"endColumn":14},{"ruleId":"183","severity":1,"message":"189","line":405,"column":9,"nodeType":"185","messageId":"186","endLine":405,"endColumn":17},{"ruleId":"183","severity":1,"message":"190","line":6,"column":3,"nodeType":"185","messageId":"186","endLine":6,"endColumn":8},{"ruleId":"191","severity":1,"message":"192","line":53,"column":6,"nodeType":"193","endLine":53,"endColumn":8,"suggestions":"194"},{"ruleId":"195","severity":1,"message":"196","line":164,"column":34,"nodeType":"197","messageId":"182","endLine":164,"endColumn":36},{"ruleId":"179","severity":1,"message":"180","line":44,"column":3,"nodeType":"181","messageId":"182","endLine":44,"endColumn":9},{"ruleId":"198","severity":1,"message":"199","line":120,"column":3,"nodeType":"200","messageId":"201","endLine":138,"endColumn":13},{"ruleId":"183","severity":1,"message":"202","line":210,"column":10,"nodeType":"185","messageId":"186","endLine":210,"endColumn":17},{"ruleId":"183","severity":1,"message":"203","line":8,"column":7,"nodeType":"185","messageId":"186","endLine":8,"endColumn":12},{"ruleId":"179","severity":1,"message":"204","line":206,"column":1,"nodeType":"181","messageId":"182","endLine":206,"endColumn":15},{"ruleId":"179","severity":1,"message":"205","line":231,"column":1,"nodeType":"181","messageId":"182","endLine":231,"endColumn":11},{"ruleId":"183","severity":1,"message":"206","line":607,"column":9,"nodeType":"185","messageId":"186","endLine":607,"endColumn":17},{"ruleId":"183","severity":1,"message":"207","line":169,"column":9,"nodeType":"185","messageId":"186","endLine":169,"endColumn":25},{"ruleId":"183","severity":1,"message":"208","line":320,"column":9,"nodeType":"185","messageId":"186","endLine":320,"endColumn":22},{"ruleId":"183","severity":1,"message":"209","line":377,"column":10,"nodeType":"185","messageId":"186","endLine":377,"endColumn":17},{"ruleId":"183","severity":1,"message":"206","line":380,"column":9,"nodeType":"185","messageId":"186","endLine":380,"endColumn":17},"no-native-reassign",["210"],"no-negated-in-lhs",["211"],"no-dupe-keys","Duplicate key 'button'.","ObjectExpression","unexpected","no-unused-vars","'staggerChildrenAnimation' is assigned a value but never used.","Identifier","unusedVar","'isHovered' is assigned a value but never used.","Duplicate key 'statusBlock'.","'colorSet' is assigned a value but never used.","'Modal' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["212"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'jobData' is assigned a value but never used.","'theme' is assigned a value but never used.","Duplicate key 'messageContent'.","Duplicate key 'messageBox'.","'navigate' is assigned a value but never used.","'handleFileChange' is assigned a value but never used.","'previewStyles' is assigned a value but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"213","fix":"214"},"Update the dependencies array to be: [getData]",{"range":"215","text":"216"},[1039,1041],"[getData]"]