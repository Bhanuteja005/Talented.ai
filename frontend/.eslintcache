[{"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\index.js":"1","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\App.js":"3","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Footer.js":"4","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Login.js":"5","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Applications.js":"6","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Home.js":"7","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Logout.js":"8","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Profile.js":"9","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Signup.js":"10","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Navbar.js":"11","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\MessagePopup.js":"12","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\JobApplications.js":"13","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\CreateJobs.js":"14","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\isAuth.js":"15","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"16","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\Profile.js":"17","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\MyJobs.js":"18","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Welcome.js":"19","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\apiList.js":"20","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\PasswordInput.js":"21","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\FileUploadInput.js":"22","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\EmailInput.js":"23","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useAnimations.js":"24","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\services.js":"25","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\servicecard.js":"26","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Wave.js":"27","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\ServiceCardsData.js":"28","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useScroll.js":"29","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\query.js":"30","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\AccordionData.js":"31","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AccordionItem.js":"32","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\agent.js":"33","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruteragent.js":"34","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\ai-interview.js":"35","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\resume.js":"36","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AudioInterview.js":"37"},{"size":500,"mtime":1728195834043,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":1728195834106,"results":"40","hashOfConfig":"39"},{"size":3786,"mtime":1746028339021,"results":"41","hashOfConfig":"39"},{"size":4786,"mtime":1728233179207,"results":"42","hashOfConfig":"39"},{"size":4011,"mtime":1730822387922,"results":"43","hashOfConfig":"39"},{"size":8052,"mtime":1747755038386,"results":"44","hashOfConfig":"39"},{"size":22919,"mtime":1748164892278,"results":"45","hashOfConfig":"39"},{"size":497,"mtime":1730642256967,"results":"46","hashOfConfig":"39"},{"size":8740,"mtime":1748103566590,"results":"47","hashOfConfig":"39"},{"size":14550,"mtime":1730822466761,"results":"48","hashOfConfig":"39"},{"size":8641,"mtime":1749151735506,"results":"49","hashOfConfig":"39"},{"size":496,"mtime":1728197859349,"results":"50","hashOfConfig":"39"},{"size":34513,"mtime":1748452426902,"results":"51","hashOfConfig":"39"},{"size":9889,"mtime":1749151763885,"results":"52","hashOfConfig":"39"},{"size":165,"mtime":1728195835360,"results":"53","hashOfConfig":"39"},{"size":24290,"mtime":1728288120435,"results":"54","hashOfConfig":"39"},{"size":5036,"mtime":1747754084692,"results":"55","hashOfConfig":"39"},{"size":29818,"mtime":1748452261389,"results":"56","hashOfConfig":"39"},{"size":4997,"mtime":1747754086419,"results":"57","hashOfConfig":"39"},{"size":786,"mtime":1748170000330,"results":"58","hashOfConfig":"39"},{"size":1666,"mtime":1728195835235,"results":"59","hashOfConfig":"39"},{"size":8569,"mtime":1748104065542,"results":"60","hashOfConfig":"39"},{"size":1167,"mtime":1728195835047,"results":"61","hashOfConfig":"39"},{"size":2481,"mtime":1728218132948,"results":"62","hashOfConfig":"39"},{"size":3100,"mtime":1728395962540,"results":"63","hashOfConfig":"39"},{"size":1109,"mtime":1728395952478,"results":"64","hashOfConfig":"39"},{"size":945,"mtime":1728395452003,"results":"65","hashOfConfig":"39"},{"size":1195,"mtime":1728395041509,"results":"66","hashOfConfig":"39"},{"size":514,"mtime":1728395454756,"results":"67","hashOfConfig":"39"},{"size":2179,"mtime":1728396265020,"results":"68","hashOfConfig":"39"},{"size":1119,"mtime":1728395741862,"results":"69","hashOfConfig":"39"},{"size":1394,"mtime":1728396078121,"results":"70","hashOfConfig":"39"},{"size":12031,"mtime":1732175838762,"results":"71","hashOfConfig":"39"},{"size":7478,"mtime":1746026282233,"results":"72","hashOfConfig":"39"},{"size":22405,"mtime":1747753804881,"results":"73","hashOfConfig":"39"},{"size":12195,"mtime":1746026265280,"results":"74","hashOfConfig":"39"},{"size":26453,"mtime":1750079676349,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"18mp7kw",{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\index.js",[],["154","155"],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\App.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Footer.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Login.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Applications.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Home.js",["156"],"import {\n  Button,\n  Checkbox,\n  Chip,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  Modal,\n  Paper,\n  Slider,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport { userType } from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"90%\",\n    marginLeft: \"auto\",\n    float: \"right\",\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(1.5),\n      width: '100%'\n    }\n  },\n  button: {\n    \n    marginTop:'90px',\n    padding: '5px 15px',\n    fontSize: '0.875rem',\n    borderRadius: '20px',\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const { job } = props;\n  const setPopup = useContext(SetPopupContext);\n  const navigate = useNavigate(); // Add this line to define navigate\n\n  const [open, setOpen] = useState(false);\n  const [sop, setSop] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n    setSop(\"\");\n  };\n\n  const handleApply = () => {\n    console.log(job._id);\n    console.log(sop);\n    axios\n      .post(\n        `${apiList.jobs}/${job._id}/applications`,\n        {\n          sop: sop,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const deadline = new Date(job.deadline).toLocaleDateString();\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3} >\n      <Grid container spacing={1}>\n        <Grid \n          container \n          item \n          xs={12} \n          md={9} \n          spacing={1} \n          direction=\"column\"\n        >\n          <Grid item>\n            <Typography variant=\"h5\">\n              {job.title}\n              {job.requiresInterview && (\n                <Chip\n                  label=\"Audio Interview Required\"\n                  size=\"small\"\n                  color=\"secondary\"\n                  style={{ marginLeft: '10px', fontSize: '0.7rem' }}\n                />\n              )}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid>\n          <Grid item>Role : {job.jobType}</Grid>\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\n          <Grid item>\n            Duration : {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n          </Grid>\n          <Grid item>Posted By : {job.recruiter.name}</Grid>\n          <Grid item>Application Deadline : {deadline}</Grid>\n\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip \n                key={skill}\n                label={skill} \n                sx={{ \n                  margin: '2px',\n                  fontSize: {\n                    xs: '0.75rem',\n                    sm: '0.875rem'\n                  }\n                }} \n              />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            className={classes.button}\n            onClick={() => {\n              setOpen(true);\n            }}\n            disabled={userType() === \"recruiter\"}\n          >\n            Apply\n          </Button>\n          \n          {/* Add audio interview button if the job has that requirement */}\n          {job.requiresInterview && (\n            <Button\n              variant=\"outlined\"\n              style={{ marginTop: '10px' }}\n              onClick={() => navigate(`/jobs/${job._id}/interview`)}\n              disabled={userType() === \"recruiter\"}\n            >\n              Take Audio Interview\n            </Button>\n          )}\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"50%\",\n            alignItems: \"center\",\n          }}\n        >\n          <TextField\n            label=\"Why Should We Hire you (upto 250 words)\"\n            multiline\n            rows={8}\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\n            variant=\"outlined\"\n            value={sop}\n            onChange={(event) => {\n              if (\n                event.target.value.split(\" \").filter(function (n) {\n                  return n !== \"\";\n                }).length <= 250\n              ) {\n                setSop(event.target.value);\n              }\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => handleApply()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.button}\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst Home = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n\n  const getData = useCallback(() => {\n    let searchParams = [];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] !== 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] !== 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration !== \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(\n          response.data.filter((obj) => {\n            const today = new Date();\n            const deadline = new Date(obj.deadline);\n            return deadline > today;\n          })\n        );\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  }, [searchOptions, setPopup]);\n\n  useEffect(() => {\n    getData();\n  }, [getData]);\n\n  return (\n    <>\n      <Grid container style={{ padding: \"30px\", minHeight: \"93vh\" }}>\n  <Grid item xs={12}>\n    <Typography variant=\"h2\" style={{ fontFamily: 'Chillax-semibold, sans-serif', color: 'black', textAlign: 'center' }}>Jobs</Typography>\n  </Grid>\n  <Grid item xs={12} sm={6} md={3}>\n  <Paper \n    sx={{\n      padding: {\n        xs: \"12px\",\n        sm: \"20px\"\n      },\n      marginTop: \"20px\",\n      marginBottom: {\n        xs: \"16px\",\n        sm: \"0\"\n      }\n    }}\n  >\n    <Typography \n      variant=\"h6\"\n      sx={{\n        fontSize: {\n          xs: '1rem',\n          sm: '1.25rem'\n        },\n        marginBottom: '12px'\n      }}\n    >\n      Filter Options\n    </Typography>\n    <Grid \n      container \n      direction=\"column\" \n      spacing={{\n        xs: 2,\n        sm: 3\n      }}\n    >\n      <Grid item>\n        <TextField\n          label=\"Search Jobs\"\n          value={searchOptions.query}\n          onChange={(event) =>\n            setSearchOptions({\n              ...searchOptions,\n              query: event.target.value,\n            })\n          }\n          onKeyPress={(ev) => {\n            if (ev.key === \"Enter\") {\n              getData();\n            }\n          }}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment>\n                <IconButton \n                  onClick={() => getData()}\n                  size=\"small\"\n                >\n                  <SearchIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n          variant=\"outlined\"\n          fullWidth\n          size=\"small\"\n        />\n      </Grid>\n      <Grid item>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setFilterOpen(true)}\n          fullWidth\n          size=\"small\"\n          sx={{\n            padding: {\n              xs: '8px',\n              sm: '12px'\n            }\n          }}\n        >\n          More Filters\n        </Button>\n      </Grid>\n    </Grid>\n  </Paper>\n</Grid>\n  <Grid item xs={9}>\n    <Grid container direction=\"column\" alignItems=\"center\">\n      <Grid item xs>\n        {jobs.length > 0 ? (\n          jobs.map((job) => {\n            return <JobTile job={job} />;\n          })\n        ) : (\n          <Typography variant=\"h5\" style={{ textAlign: \"center\", fontFamily: 'Chillax-semibold, sans-serif', color: 'black' }}>\n            No jobs found\n          </Typography>\n        )}\n      </Grid>\n    </Grid>\n  </Grid>\n</Grid>\n<FilterPopup\n  open={filterOpen}\n  searchOptions={searchOptions}\n  setSearchOptions={setSearchOptions}\n  handleClose={() => setFilterOpen(false)}\n  getData={() => {\n    getData();\n    setFilterOpen(false);\n  }}\n/>\n</>\n  );\n}\n\nexport default Home;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Logout.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Profile.js",["157"],"import {\n  Button,\n  Grid,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {education.map((obj, key) => (\n        <Grid item container className={classes.inputBox} key={key}>\n          <Grid item xs={6}>\n            <TextField\n              label={`Institution Name #${key + 1}`}\n              value={education[key].institutionName}\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].institutionName = event.target.value;\n                setEducation(newEdu);\n              }}\n              variant=\"outlined\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Start Year\"\n              value={obj.startYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].startYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"End Year\"\n              value={obj.endYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].endYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n        </Grid>\n      ))}\n      <Grid item style={{ alignSelf: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() =>\n            setEducation([\n              ...education,\n              {\n                institutionName: \"\",\n                startYear: \"\",\n                endYear: \"\",\n              },\n            ])\n          }\n          className={classes.inputBox}\n        >\n          Add another institution details\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n  });\n\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n\n  const [profileData, setProfileData] = useState({\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n  });\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  const getData = useCallback(() => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        if (response.data.education.length > 0) {\n          setEducation(\n            response.data.education.map((edu) => ({\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\n              startYear: edu.startYear ? edu.startYear : \"\",\n              endYear: edu.endYear ? edu.endYear : \"\",\n            }))\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  }, [setPopup]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  useEffect(() => {\n    if (profileDetails) {\n      setProfileData(profileDetails);\n      console.log(\"Profile details loaded:\", profileDetails);\n    }\n  }, [profileDetails]);\n\n  const handleUpdate = () => {\n    console.log(education);\n\n    let updatedDetails = {\n      ...profileDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <Paper\n      style={{\n        padding: \"50px\",\n        outline: \"none\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n        <Grid item>\n          <Typography variant=\"h2\">Profile</Typography>\n        </Grid>\n        <Grid item xs>\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\n              <Grid item>\n                <TextField\n                  label=\"Name\"\n                  value={profileDetails.name}\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                />\n              </Grid>\n              <MultifieldInput\n                education={education}\n                setEducation={setEducation}\n              />\n              <Grid item>\n                <ChipInput\n                  className={classes.inputBox}\n                  label=\"Skills\"\n                  variant=\"outlined\"\n                  helperText=\"Press enter to add skills\"\n                  value={profileDetails.skills}\n                  onAdd={(chip) =>\n                    setProfileDetails({\n                      ...profileDetails,\n                      skills: [...profileDetails.skills, chip],\n                    })\n                  }\n                  onDelete={(chip, index) => {\n                    let skills = profileDetails.skills;\n                    skills.splice(index, 1);\n                    setProfileDetails({\n                      ...profileDetails,\n                      skills: skills,\n                    });\n                  }}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Resume (.pdf)\"\n                  icon={<DescriptionIcon />}\n                  uploadTo={apiList.uploadResume}\n                  handleInput={handleInput}\n                  identifier={\"resume\"}\n                  initialValue={profileData.resume} // Pass existing resume filename\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Profile Photo (.jpg/.png)\"\n                  icon={<FaceIcon />}\n                  uploadTo={apiList.uploadProfileImage}\n                  handleInput={handleInput}\n                  identifier={\"profile\"}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n              onClick={() => handleUpdate()}\n            >\n              Update Details\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Profile;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Signup.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Navbar.js",["158"],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\MessagePopup.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\JobApplications.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\CreateJobs.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\isAuth.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\Profile.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\MyJobs.js",["159","160","161","162","163","164","165","166","167"],"import {\n  Button,\n  Checkbox,\n  Chip,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  makeStyles,\n  MenuItem,\n  Modal,\n  Paper,\n  Slider,\n  TextField,\n  Typography\n} from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n    padding: '5px 15px',\n    fontSize: '0.875rem',\n    borderRadius: '20px',\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const { job, getData, recruiterSuggestion } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [openUpdate, setOpenUpdate] = useState(false);\n  const [jobDetails, setJobDetails] = useState(job);\n\n  console.log(jobDetails);\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleClick = (location) => {\n    navigate(location);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseUpdate = () => {\n    setOpenUpdate(false);\n  };\n\n  const handleDelete = () => {\n    console.log(job._id);\n    axios\n      .delete(`${apiList.jobs}/${job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const handleJobUpdate = () => {\n    axios\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleCloseUpdate();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleCloseUpdate();\n      });\n  };\n\n  const postedOn = new Date(job.dateOfPosting);\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{job.title}</Typography>\n          </Grid>\n          <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid>\n          <Grid item>Role : {job.jobType}</Grid>\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\n          <Grid item>\n            Duration :{\" \"}\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n          </Grid>\n          <Grid item>Date Of Posting: {postedOn.toLocaleDateString()}</Grid>\n          <Grid item>Number of Applicants: {job.maxApplicants}</Grid>\n          <Grid item>\n            Remaining Number of Positions:{\" \"}\n            {job.maxPositions - job.acceptedCandidates}\n          </Grid>\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n          \n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item xs>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              onClick={() => handleClick(`/job/applications/${job._id}`)}\n            >\n              View Applications\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpenUpdate(true);\n              }}\n              style={{\n                background: \"#FC7A1E\",\n                color: \"#fff\",\n              }}\n            >\n              Update Details\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              Delete Job\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Are you sure?\n          </Typography>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleDelete()}\n              >\n                Delete\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleClose()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n      <Modal\n        open={openUpdate}\n        onClose={handleCloseUpdate}\n        className={classes.popupDialog}\n      >\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Update Details\n          </Typography>\n          <Grid\n  item\n  container\n  direction=\"column\"\n  justifyContent=\"center\"\n  alignItems=\"center\"\n>\n            <Grid item>\n              <TextField\n                label=\"Application Deadline\"\n                type=\"datetime-local\"\n                value={jobDetails.deadline.substr(0, 16)}\n                onChange={(event) => {\n                  handleInput(\"deadline\", event.target.value);\n                }}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Maximum Number Of Applicants\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxApplicants}\n                onChange={(event) => {\n                  handleInput(\"maxApplicants\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Positions Available\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxPositions}\n                onChange={(event) => {\n                  handleInput(\"maxPositions\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n          <Grid\n  container\n  item\n  xs\n  direction=\"column\"\n  alignItems=\"stretch\"\n  justifyContent=\"center\"\n>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleJobUpdate()}\n              >\n                Update\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleCloseUpdate()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justifyContent=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst MyJobs = () => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n  const [interviewResults, setInterviewResults] = useState({});\n  const [recruiterSuggestions, setRecruiterSuggestions] = useState({});\n\n  const setPopup = useContext(SetPopupContext);\n\n  const getData = useCallback(() => {\n    let searchParams = [`myjobs=1`];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] !== 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] !== 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration !== \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    console.log(address);\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  }, [searchOptions, setJobs, setPopup]);\n\n  useEffect(() => {\n    getData();\n    fetchInterviewResults();\n  }, []);\n\n  // Fetch recruiter agent suggestion for each job\n  useEffect(() => {\n    if (jobs.length === 0) return;\n    const fetchSuggestions = async () => {\n      const newSuggestions = {};\n      await Promise.all(jobs.map(async (job) => {\n        // Only fetch if not already fetched\n        if (recruiterSuggestions[job._id] !== undefined) {\n          newSuggestions[job._id] = recruiterSuggestions[job._id];\n          return;\n        }\n        try {\n          const res = await axios.post(\n            \"/api/suggest-candidate\",\n            {\n              companyDescription: \"\", // Not available, leave blank\n              candidateInfo: \"\", // Not available, leave blank\n              jobDescription: `Title: ${job.title}\\nSkills: ${job.skillsets.join(\", \")}`\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n              },\n            }\n          );\n          newSuggestions[job._id] = res.data.evaluation || null;\n        } catch (e) {\n          newSuggestions[job._id] = null;\n        }\n      }));\n      setRecruiterSuggestions((prev) => ({ ...prev, ...newSuggestions }));\n    };\n    fetchSuggestions();\n    // eslint-disable-next-line\n  }, [jobs]);\n\n  const fetchInterviewResults = async () => {\n    try {\n      const response = await axios.get(apiList.interviewResults, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      \n      if (response.data.success) {\n        // Create a map of applicationId to interview results\n        const resultsMap = {};\n        response.data.results.forEach(result => {\n          resultsMap[result.applicationId._id] = result;\n        });\n        setInterviewResults(resultsMap);\n      }\n    } catch (error) {\n      console.error(\"Error fetching interview results:\", error);\n    }\n  };\n\n  const getInterviewScore = (applicationId) => {\n    const result = interviewResults[applicationId];\n    return result ? result.overallScore : null;\n  };\n\n  const getInterviewStatus = (applicationId) => {\n    const result = interviewResults[applicationId];\n    if (!result) return \"Not Taken\";\n    return \"Completed\";\n  };\n\n  const viewInterviewDetails = (applicationId) => {\n    const result = interviewResults[applicationId];\n    if (!result) return;\n\n    setPopup({\n      open: true,\n      severity: \"info\",\n      message: (\n        <div>\n          <h3>Interview Results</h3>\n          <p><strong>Overall Score:</strong> {result.overallScore}/10</p>\n          <p><strong>Questions Asked:</strong> {result.questions.length}</p>\n          <p><strong>Completed At:</strong> {new Date(result.completedAt).toLocaleString()}</p>\n          {result.questions.map((question, index) => (\n            <div key={index} style={{ marginBottom: '10px', padding: '10px', border: '1px solid #ccc' }}>\n              <p><strong>Q{index + 1}:</strong> {question}</p>\n              <p><strong>Answer:</strong> {result.answers[index] || 'No answer provided'}</p>\n              <p><strong>Score:</strong> {result.scores[index] || 0}/10</p>\n            </div>\n          ))}\n          {/* Show video if available */}\n          {(result.videoFileId || result.videoRecording) && (\n            <div style={{ marginTop: '15px', padding: '10px', border: '1px solid #2196F3', borderRadius: '6px', background: '#f0f7ff' }}>\n              <p><strong>Interview Video:</strong></p>\n              {/* Video preview (stream) */}\n              <video\n                width=\"320\"\n                height=\"240\"\n                controls\n                style={{ marginBottom: '10px', background: '#000' }}\n              >\n                <source\n                  src={\n                    result.videoFileId\n                      ? `${apiList.streamInterview}/${result.videoFileId}`\n                      : `${apiList.streamInterview}/${result.videoRecording}`\n                  }\n                  type=\"video/webm\"\n                />\n                Your browser does not support the video tag.\n              </video>\n              <br />\n              {/* Download link */}\n              <a\n                href={\n                  result.videoFileId\n                    ? `${apiList.downloadInterview}/${result.videoFileId}`\n                    : `${apiList.downloadInterview}/${result.videoRecording}`\n                }\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={{\n                  color: \"#fff\",\n                  background: \"#2196F3\",\n                  padding: \"8px 16px\",\n                  borderRadius: \"4px\",\n                  textDecoration: \"none\",\n                  fontWeight: \"bold\"\n                }}\n              >\n                Download Video\n              </a>\n              <div style={{ fontSize: \"12px\", color: \"#666\", marginTop: \"5px\" }}>\n                File: {result.videoRecording}\n              </div>\n            </div>\n          )}\n        </div>\n      )\n    });\n  };\n\n  return (\n    <Grid\n      container\n      item\n      direction=\"column\"\n      alignItems=\"center\"\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\n    >\n      {/* ...existing code... */}\n      \n      <Grid container item xs direction=\"column\">\n        <Grid item>\n          <h2>Jobs</h2>\n        </Grid>\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          style={{ width: \"100%\" }}\n          alignItems=\"stretch\"\n          justifyContent=\"center\"\n        >\n          {jobs.length > 0 ? (\n            jobs.map((job) => {\n              return (\n                <JobTile\n                  job={job}\n                  getData={getData}\n                  key={job._id}\n                  recruiterSuggestion={recruiterSuggestions[job._id]}\n                />\n              );\n            })\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No jobs found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default MyJobs;\n","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Welcome.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\apiList.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\PasswordInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\FileUploadInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\EmailInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useAnimations.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\services.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\servicecard.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Wave.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\ServiceCardsData.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useScroll.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\query.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\AccordionData.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AccordionItem.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\agent.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruteragent.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\ai-interview.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\resume.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AudioInterview.js",["168","169"],{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":50,"column":3,"nodeType":"176","messageId":"177","endLine":50,"endColumn":9},{"ruleId":"178","severity":1,"message":"179","line":172,"column":6,"nodeType":"180","endLine":172,"endColumn":8,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":85,"column":10,"nodeType":"184","messageId":"185","endLine":85,"endColumn":19},{"ruleId":"182","severity":1,"message":"186","line":69,"column":25,"nodeType":"184","messageId":"185","endLine":69,"endColumn":44},{"ruleId":"182","severity":1,"message":"187","line":365,"column":7,"nodeType":"184","messageId":"185","endLine":365,"endColumn":18},{"ruleId":"182","severity":1,"message":"188","line":699,"column":10,"nodeType":"184","messageId":"185","endLine":699,"endColumn":20},{"ruleId":"182","severity":1,"message":"189","line":699,"column":22,"nodeType":"184","messageId":"185","endLine":699,"endColumn":35},{"ruleId":"182","severity":1,"message":"190","line":700,"column":25,"nodeType":"184","messageId":"185","endLine":700,"endColumn":41},{"ruleId":"178","severity":1,"message":"179","line":804,"column":6,"nodeType":"180","endLine":804,"endColumn":8,"suggestions":"191"},{"ruleId":"182","severity":1,"message":"192","line":863,"column":9,"nodeType":"184","messageId":"185","endLine":863,"endColumn":26},{"ruleId":"182","severity":1,"message":"193","line":868,"column":9,"nodeType":"184","messageId":"185","endLine":868,"endColumn":27},{"ruleId":"182","severity":1,"message":"194","line":874,"column":9,"nodeType":"184","messageId":"185","endLine":874,"endColumn":29},{"ruleId":"182","severity":1,"message":"195","line":137,"column":9,"nodeType":"184","messageId":"185","endLine":137,"endColumn":17},{"ruleId":"178","severity":1,"message":"196","line":241,"column":6,"nodeType":"180","endLine":241,"endColumn":16,"suggestions":"197"},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-dupe-keys","Duplicate key 'button'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["200"],"no-unused-vars","'isHovered' is assigned a value but never used.","Identifier","unusedVar","'recruiterSuggestion' is assigned a value but never used.","'FilterPopup' is assigned a value but never used.","'filterOpen' is assigned a value but never used.","'setFilterOpen' is assigned a value but never used.","'setSearchOptions' is assigned a value but never used.",["201"],"'getInterviewScore' is assigned a value but never used.","'getInterviewStatus' is assigned a value but never used.","'viewInterviewDetails' is assigned a value but never used.","'videoRef' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isRecording'. Either include it or remove the dependency array.",["202"],"no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"203","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [getData]",{"range":"208","text":"209"},{"range":"210","text":"209"},"Update the dependencies array to be: [isRecording, setPopup]",{"range":"211","text":"212"},[4319,4321],"[getData]",[23761,23763],[7274,7284],"[isRecording, setPopup]"]