[{"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\index.js":"1","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\App.js":"3","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Footer.js":"4","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Login.js":"5","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Applications.js":"6","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Home.js":"7","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Logout.js":"8","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Profile.js":"9","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Signup.js":"10","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Navbar.js":"11","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\MessagePopup.js":"12","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\JobApplications.js":"13","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\CreateJobs.js":"14","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\isAuth.js":"15","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"16","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\Profile.js":"17","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\MyJobs.js":"18","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Welcome.js":"19","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\apiList.js":"20","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\PasswordInput.js":"21","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\FileUploadInput.js":"22","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\EmailInput.js":"23","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useAnimations.js":"24","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\services.js":"25","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\servicecard.js":"26","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Wave.js":"27","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\ServiceCardsData.js":"28","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useScroll.js":"29","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\query.js":"30","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\AccordionData.js":"31","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AccordionItem.js":"32","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\agent.js":"33","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruteragent.js":"34","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\ai-interview.js":"35"},{"size":500,"mtime":1728195834043,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":1728195834106,"results":"38","hashOfConfig":"37"},{"size":3950,"mtime":1730624133524,"results":"39","hashOfConfig":"37"},{"size":4786,"mtime":1728233179207,"results":"40","hashOfConfig":"37"},{"size":3529,"mtime":1728198725978,"results":"41","hashOfConfig":"37"},{"size":7269,"mtime":1728290401129,"results":"42","hashOfConfig":"37"},{"size":21148,"mtime":1728633454819,"results":"43","hashOfConfig":"37"},{"size":497,"mtime":1728199899578,"results":"44","hashOfConfig":"37"},{"size":8221,"mtime":1728200218359,"results":"45","hashOfConfig":"37"},{"size":14287,"mtime":1728198544253,"results":"46","hashOfConfig":"37"},{"size":4966,"mtime":1730624167794,"results":"47","hashOfConfig":"37"},{"size":496,"mtime":1728197859349,"results":"48","hashOfConfig":"37"},{"size":22538,"mtime":1728552495702,"results":"49","hashOfConfig":"37"},{"size":8117,"mtime":1728552481280,"results":"50","hashOfConfig":"37"},{"size":165,"mtime":1728195835360,"results":"51","hashOfConfig":"37"},{"size":24290,"mtime":1728288120435,"results":"52","hashOfConfig":"37"},{"size":4999,"mtime":1728195834969,"results":"53","hashOfConfig":"37"},{"size":25982,"mtime":1728288139771,"results":"54","hashOfConfig":"37"},{"size":5691,"mtime":1728716383922,"results":"55","hashOfConfig":"37"},{"size":450,"mtime":1730638748152,"results":"56","hashOfConfig":"37"},{"size":1666,"mtime":1728195835235,"results":"57","hashOfConfig":"37"},{"size":3279,"mtime":1728195835125,"results":"58","hashOfConfig":"37"},{"size":1167,"mtime":1728195835047,"results":"59","hashOfConfig":"37"},{"size":2481,"mtime":1728218132948,"results":"60","hashOfConfig":"37"},{"size":3100,"mtime":1728395962540,"results":"61","hashOfConfig":"37"},{"size":1109,"mtime":1728395952478,"results":"62","hashOfConfig":"37"},{"size":945,"mtime":1728395452003,"results":"63","hashOfConfig":"37"},{"size":1195,"mtime":1728395041509,"results":"64","hashOfConfig":"37"},{"size":514,"mtime":1728395454756,"results":"65","hashOfConfig":"37"},{"size":2179,"mtime":1728396265020,"results":"66","hashOfConfig":"37"},{"size":1119,"mtime":1728395741862,"results":"67","hashOfConfig":"37"},{"size":1394,"mtime":1728396078121,"results":"68","hashOfConfig":"37"},{"size":7057,"mtime":1730638627959,"results":"69","hashOfConfig":"37"},{"size":6632,"mtime":1730638762829,"results":"70","hashOfConfig":"37"},{"size":11510,"mtime":1730639617547,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"18mp7kw",{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\index.js",[],["149","150"],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\App.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Footer.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Login.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Applications.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Home.js",["151"],"import {\n  Button,\n  Checkbox,\n  Chip,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  Modal,\n  Paper,\n  Slider,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport { userType } from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"90%\",\n    marginLeft: \"auto\",\n    float: \"right\",\n  },\n  button: {\n    marginTop:'90px',\n    padding: '5px 15px',\n    fontSize: '0.875rem',\n    borderRadius: '20px',\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const { job } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [sop, setSop] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n    setSop(\"\");\n  };\n\n  const handleApply = () => {\n    console.log(job._id);\n    console.log(sop);\n    axios\n      .post(\n        `${apiList.jobs}/${job._id}/applications`,\n        {\n          sop: sop,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const deadline = new Date(job.deadline).toLocaleDateString();\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{job.title}</Typography>\n          </Grid>\n          <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid>\n          <Grid item>Role : {job.jobType}</Grid>\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\n          <Grid item>\n            Duration :{\" \"}\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n          </Grid>\n          <Grid item>Posted By : {job.recruiter.name}</Grid>\n          <Grid item>Application Deadline : {deadline}</Grid>\n\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            className={classes.button}\n            onClick={() => {\n              setOpen(true);\n            }}\n            disabled={userType() === \"recruiter\"}\n          >\n            Apply\n          </Button>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"50%\",\n            alignItems: \"center\",\n          }}\n        >\n          <TextField\n            label=\"Why Should We Hire you (upto 250 words)\"\n            multiline\n            rows={8}\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\n            variant=\"outlined\"\n            value={sop}\n            onChange={(event) => {\n              if (\n                event.target.value.split(\" \").filter(function (n) {\n                  return n !== \"\";\n                }).length <= 250\n              ) {\n                setSop(event.target.value);\n              }\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => handleApply()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.button}\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst Home = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n\n  const getData = useCallback(() => {\n    let searchParams = [];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] !== 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] !== 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration !== \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(\n          response.data.filter((obj) => {\n            const today = new Date();\n            const deadline = new Date(obj.deadline);\n            return deadline > today;\n          })\n        );\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  }, [searchOptions, setPopup]);\n\n  useEffect(() => {\n    getData();\n  }, [getData]);\n\n  return (\n    <>\n      <Grid container style={{ padding: \"30px\", minHeight: \"93vh\" }}>\n  <Grid item xs={12}>\n    <Typography variant=\"h2\" style={{ fontFamily: 'Chillax-semibold, sans-serif', color: 'black', textAlign: 'center' }}>Jobs</Typography>\n  </Grid>\n  <Grid item xs={3}>\n    <Paper style={{ padding: \"20px\", marginTop:\"20px\"}}>\n      <Typography variant=\"h6\">Filter Options</Typography>\n      <Grid container direction=\"column\" spacing={3}>\n        <Grid item>\n          <TextField\n            label=\"Search Jobs\"\n            value={searchOptions.query}\n            onChange={(event) =>\n              setSearchOptions({\n                ...searchOptions,\n                query: event.target.value,\n              })\n            }\n            onKeyPress={(ev) => {\n              if (ev.key === \"Enter\") {\n                getData();\n              }\n            }}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment>\n                  <IconButton onClick={() => getData()}>\n                    <SearchIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n            variant=\"outlined\"\n            fullWidth\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => setFilterOpen(true)}\n            fullWidth\n          >\n            More Filters\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  </Grid>\n  <Grid item xs={9}>\n    <Grid container direction=\"column\" alignItems=\"center\">\n      <Grid item xs>\n        {jobs.length > 0 ? (\n          jobs.map((job) => {\n            return <JobTile job={job} />;\n          })\n        ) : (\n          <Typography variant=\"h5\" style={{ textAlign: \"center\", fontFamily: 'Chillax-semibold, sans-serif', color: 'black' }}>\n            No jobs found\n          </Typography>\n        )}\n      </Grid>\n    </Grid>\n  </Grid>\n</Grid>\n<FilterPopup\n  open={filterOpen}\n  searchOptions={searchOptions}\n  setSearchOptions={setSearchOptions}\n  handleClose={() => setFilterOpen(false)}\n  getData={() => {\n    getData();\n    setFilterOpen(false);\n  }}\n/>\n</>\n  );\n}\n\nexport default Home;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Logout.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Profile.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Signup.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Navbar.js",["152","153"],"import {\n  AppBar,\n  Button,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { motion, useAnimation } from \"framer-motion\";\nimport React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { useAnimations } from \"../Hooks/useAnimations\";\nimport isAuth, { userType } from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst StyledAppBar = styled(AppBar)`\n  background: white !important;\n  box-shadow: none !important;\n`;\n\nconst StyledButton = styled(motion(Button))`\n  font-family: Chillax, sans-serif !important;\n  color: black !important;\n  position: relative;\n  &:after {\n    content: '';\n    position: absolute;\n    width: 0;\n    height: 2px;\n    bottom: -2px;\n    left: 0;\n    background-color: black;\n    transition: width 0.3s ease-in-out;\n  }\n  &:hover:after {\n    width: 100%;\n  }\n`;\n\nconst Navbar = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const controls = useAnimation();\n  const { staggerChildrenAnimation } = useAnimations();\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handleClick = (location) => {\n    console.log(location);\n    history.push(location);\n  };\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n    controls.start(\"show\");\n  };\n\n  const buttonVariants = {\n    hidden: { opacity: 0, y: -20 },\n    show: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  return (\n    <StyledAppBar position=\"fixed\" onMouseEnter={handleMouseEnter}>\n      <Toolbar>\n        <Link to=\"/\" style={{ textDecoration: 'none' }}>\n          <Typography variant=\"h6\" className={classes.title} style={{ fontFamily: 'Chillax, sans-serif', color: 'black' }}>\n            Talented.ai\n          </Typography>\n        </Link>\n        <div style={{ marginLeft: 'auto', display: 'flex' }}>\n          <motion.div initial=\"hidden\" animate={controls} variants={buttonVariants} style={{ display: 'flex' }}>\n            {isAuth() ? (\n              userType() === \"recruiter\" ? (\n                <>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/home\")}>\n                    Home\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/addjob\")}>\n                    Add Jobs\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/myjobs\")}>\n                    My Jobs\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/employees\")}>\n                    Employees\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/recruiter\")}>\n                    Agent\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/profile\")}>\n                    Profile\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/logout\")}>\n                    Logout\n                  </StyledButton>\n                </>\n              ) : (\n                <>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/home\")}>\n                    Home\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/applications\")}>\n                    Applications\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/profile\")}>\n                    Profile\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/ai-interview\")}>\n                    Mock-Interview\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/candidate\")}>\n                    Candidate\n                  </StyledButton>\n                  <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/logout\")}>\n                    Logout\n                  </StyledButton>\n                </>\n              )\n            ) : (\n              <>\n                <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/login\")}>\n                  Login\n                </StyledButton>\n                <StyledButton variants={buttonVariants} onClick={() => handleClick(\"/signup\")}>\n                  Signup\n                </StyledButton>\n              </>\n            )}\n          </motion.div>\n        </div>\n      </Toolbar>\n    </StyledAppBar>\n  );\n};\n\nexport default Navbar;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\MessagePopup.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\JobApplications.js",["154","155"],"import {\n  Avatar,\n  Button,\n  Checkbox,\n  Chip,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  makeStyles,\n  Modal,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList, { server } from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"80%\",\n  },\n  button: {\n    padding: '5px 15px',\n    fontSize: '0.875rem',\n    borderRadius: '20px',\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n\n  avatar: {\n    width: theme.spacing(17),\n    height: theme.spacing(17),\n  },\n  statusBlock: {\n    padding: '10px 20px',\n    fontSize: '0.875rem',\n    borderRadius: '20px',\n    color: '#ffffff',\n    '&.shortlisted': {\n      backgroundColor: '#3f51b5',\n      '&:hover': {\n        backgroundColor: '#303f9f',\n      },\n    },\n    '&.rejected': {\n      backgroundColor: '#f44336',\n      '&:hover': {\n        backgroundColor: '#d32f2f',\n      },\n    },\n    '&.accepted': {\n      backgroundColor: '#4caf50',\n      '&:hover': {\n        backgroundColor: '#388e3c',\n      },\n    },\n    '&.cancelled': {\n      backgroundColor: '#ff9800',\n      '&:hover': {\n        backgroundColor: '#f57c00',\n      },\n    },\n    '&.finished': {\n      backgroundColor: '#9e9e9e',\n      '&:hover': {\n        backgroundColor: '#757575',\n      },\n    },\n  },\n  smallButton: {\n    padding: '5px',\n    fontSize: '0.875rem',\n    borderRadius: '50%',\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n}));\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Application Status\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"rejected\"\n                      checked={searchOptions.status.rejected}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Rejected\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"applied\"\n                      checked={searchOptions.status.applied}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Applied\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"shortlisted\"\n                      checked={searchOptions.status.shortlisted}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Shortlisted\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"name\"\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"name\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"name\">\n                    <Typography>Name</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"dateOfApplication\"\n                    checked={searchOptions.sort.dateOfApplication.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfApplication: {\n                            ...searchOptions.sort.dateOfApplication,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"dateOfApplication\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"dateOfApplication\">\n                    <Typography>Date of Application</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.dateOfApplication.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfApplication: {\n                            ...searchOptions.sort.dateOfApplication,\n                            desc: !searchOptions.sort.dateOfApplication.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.dateOfApplication.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\n                              .desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n\n  const appliedOn = new Date(application.dateOfApplication);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n  };\n\n  const getResume = () => {\n    if (application.jobApplicant.resume && application.jobApplicant.resume !== \"\") {\n      const address = `${server}/api/download/resume/${application.jobApplicant.resume}`;\n      console.log(address);\n      axios(address, {\n        method: \"GET\",\n        responseType: \"blob\",\n      })\n        .then((response) => {\n          const file = new Blob([response.data], { type: \"application/pdf\" });\n          const fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        })\n        .catch((error) => {\n          console.log(error);\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: \"Error downloading resume\",\n          });\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"No resume found\",\n      });\n    }\n  };\n\n  const updateStatus = (status) => {\n    const address = `${apiList.applications}/${application._id}`;\n    const statusData = {\n      status: status,\n      dateOfJoining: new Date().toISOString(),\n    };\n    axios\n      .put(address, statusData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  const buttonSet = {\n    applied: (\n      <>\n        <Grid item xs>\n          <Button\n            className={`${classes.statusBlock} shortlisted`}\n            onClick={() => updateStatus(\"shortlisted\")}\n          >\n            Shortlist\n          </Button>\n        </Grid>\n        <Grid item xs>\n          <Button\n            className={`${classes.statusBlock} rejected`}\n            onClick={() => updateStatus(\"rejected\")}\n          >\n            Reject\n          </Button>\n        </Grid>\n      </>\n    ),\n    shortlisted: (\n      <>\n        <Grid item xs>\n          <Button\n            className={`${classes.statusBlock} accepted`}\n            onClick={() => updateStatus(\"accepted\")}\n          >\n            Accept\n          </Button>\n        </Grid>\n        <Grid item xs>\n          <Button\n            className={`${classes.statusBlock} rejected`}\n            onClick={() => updateStatus(\"rejected\")}\n          >\n            Reject\n          </Button>\n        </Grid>\n      </>\n    ),\n    rejected: (\n      <>\n        <Grid item xs>\n          <Paper className={`${classes.statusBlock} rejected`}>\n            Rejected\n          </Paper>\n        </Grid>\n      </>\n    ),\n    accepted: (\n      <>\n        <Grid item xs>\n          <Paper className={`${classes.statusBlock} accepted`}>\n            Accepted\n          </Paper>\n        </Grid>\n      </>\n    ),\n    cancelled: (\n      <>\n        <Grid item xs>\n          <Paper className={`${classes.statusBlock} cancelled`}>\n            Cancelled\n          </Paper>\n        </Grid>\n      </>\n    ),\n    finished: (\n      <>\n        <Grid item xs>\n          <Paper className={`${classes.statusBlock} finished`}>\n            Finished\n          </Paper>\n        </Grid>\n      </>\n    ),\n  };\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid\n          item\n          xs={2}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Avatar\n            src={`${server}${application.jobApplicant.profile}`}\n            className={classes.avatar}\n          />\n        </Grid>\n        <Grid container item xs={7} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">\n              {application.jobApplicant.name}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Rating\n              value={\n                application.jobApplicant.rating !== -1\n                  ? application.jobApplicant.rating\n                  : null\n              }\n              readOnly\n            />\n          </Grid>\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\n          <Grid item>\n            Education:{\" \"}\n            {application.jobApplicant.education\n              .map((edu) => {\n                return `${edu.institutionName} (${edu.startYear}-${\n                  edu.endYear ? edu.endYear : \"Ongoing\"\n                })`;\n              })\n              .join(\", \")}\n          </Grid>\n          <Grid item>\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\n          </Grid>\n          <Grid item>\n            {application.jobApplicant.skills.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              color=\"primary\"\n              onClick={() => getResume()}\n            >\n              Download Resume\n            </Button>\n          </Grid>\n          <Grid item container xs>\n            {buttonSet[application.status]}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            // onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst JobApplications = (props) => {\n    const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n  const { jobId } = useParams();\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    status: {\n      all: false,\n      applied: false,\n      shortlisted: false,\n    },\n    sort: {\n      \"jobApplicant.name\": {\n        status: false,\n        desc: false,\n      },\n      dateOfApplication: {\n        status: true,\n        desc: true,\n      },\n      \"jobApplicant.rating\": {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const getData = useCallback(() => {\n    let searchParams = [];\n\n    if (searchOptions.status.rejected) {\n      searchParams = [...searchParams, `status=rejected`];\n    }\n    if (searchOptions.status.applied) {\n      searchParams = [...searchParams, `status=applied`];\n    }\n    if (searchOptions.status.shortlisted) {\n      searchParams = [...searchParams, `status=shortlisted`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = `${apiList.applicants}?jobId=${jobId}`;\n    if (queryString !== \"\") {\n      address = `${address}&${queryString}`;\n    }\n\n    console.log(address);\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setApplications([]);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n      });\n  }, [searchOptions, jobId, setPopup]);\n\n  useEffect(() => {\n    getData();\n  }, [getData]);\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Applications</Typography>\n        </Grid>\n        <Grid item>\n          <IconButton className={classes.smallButton} onClick={() => setFilterOpen(true)}>\n            <FilterListIcon />\n          </IconButton>\n        </Grid>\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          style={{ width: \"100%\" }}\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {applications.length > 0 ? (\n            applications.map((obj) => (\n              <Grid item>\n                {/* {console.log(obj)} */}\n                <ApplicationTile application={obj} getData={getData} />\n              </Grid>\n            ))\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No Applications Found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default JobApplications;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\CreateJobs.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\isAuth.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\Profile.js",["156","157","158"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        setPhone(response.data.contactNumber);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const handleUpdate = () => {\n    let updatedDetails = {\n      ...profileDetails,\n    };\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Profile</Typography>\n        </Grid>\n        <Grid item xs style={{ width: \"100%\" }}>\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              //   width: \"60%\",\n            }}\n          >\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\n              <Grid item>\n                <TextField\n                  label=\"Name\"\n                  value={profileDetails.name}\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                  style={{ width: \"100%\" }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Bio (upto 250 words)\"\n                  multiline\n                  rows={8}\n                  style={{ width: \"100%\" }}\n                  variant=\"outlined\"\n                  value={profileDetails.bio}\n                  onChange={(event) => {\n                    if (\n                      event.target.value.split(\" \").filter(function (n) {\n                        return n != \"\";\n                      }).length <= 250\n                    ) {\n                      handleInput(\"bio\", event.target.value);\n                    }\n                  }}\n                />\n              </Grid>\n              <Grid\n                item\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <PhoneInput\n                  country={\"in\"}\n                  value={phone}\n                  onChange={(phone) => setPhone(phone)}\n                  style={{ width: \"auto\" }}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n              onClick={() => handleUpdate()}\n            >\n              Update Details\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruiter\\MyJobs.js",["159"],"import {\n  Button,\n  Checkbox,\n  Chip,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  Modal,\n  Paper,\n  Slider,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  button: {\n    padding: '5px 15px',\n    fontSize: '0.875rem',\n    borderRadius: '20px',\n    backgroundColor: '#3f51b5',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#303f9f',\n    },\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const { job, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [openUpdate, setOpenUpdate] = useState(false);\n  const [jobDetails, setJobDetails] = useState(job);\n\n  console.log(jobDetails);\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleClick = (location) => {\n    history.push(location);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseUpdate = () => {\n    setOpenUpdate(false);\n  };\n\n  const handleDelete = () => {\n    console.log(job._id);\n    axios\n      .delete(`${apiList.jobs}/${job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const handleJobUpdate = () => {\n    axios\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleCloseUpdate();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleCloseUpdate();\n      });\n  };\n\n  const postedOn = new Date(job.dateOfPosting);\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{job.title}</Typography>\n          </Grid>\n          <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid>\n          <Grid item>Role : {job.jobType}</Grid>\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\n          <Grid item>\n            Duration :{\" \"}\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n          </Grid>\n          <Grid item>Date Of Posting: {postedOn.toLocaleDateString()}</Grid>\n          <Grid item>Number of Applicants: {job.maxApplicants}</Grid>\n          <Grid item>\n            Remaining Number of Positions:{\" \"}\n            {job.maxPositions - job.acceptedCandidates}\n          </Grid>\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item xs>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              onClick={() => handleClick(`/job/applications/${job._id}`)}\n            >\n              View Applications\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpenUpdate(true);\n              }}\n              style={{\n                background: \"#FC7A1E\",\n                color: \"#fff\",\n              }}\n            >\n              Update Details\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              Delete Job\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Are you sure?\n          </Typography>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleDelete()}\n              >\n                Delete\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleClose()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n      <Modal\n        open={openUpdate}\n        onClose={handleCloseUpdate}\n        className={classes.popupDialog}\n      >\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Update Details\n          </Typography>\n          <Grid\n  item\n  container\n  direction=\"column\"\n  justifyContent=\"center\"\n  alignItems=\"center\"\n>\n            <Grid item>\n              <TextField\n                label=\"Application Deadline\"\n                type=\"datetime-local\"\n                value={jobDetails.deadline.substr(0, 16)}\n                onChange={(event) => {\n                  handleInput(\"deadline\", event.target.value);\n                }}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Maximum Number Of Applicants\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxApplicants}\n                onChange={(event) => {\n                  handleInput(\"maxApplicants\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Positions Available\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxPositions}\n                onChange={(event) => {\n                  handleInput(\"maxPositions\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n          <Grid\n  container\n  item\n  xs\n  direction=\"column\"\n  alignItems=\"stretch\"\n  justifyContent=\"center\"\n>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleJobUpdate()}\n              >\n                Update\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleCloseUpdate()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justifyContent=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst MyJobs = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n\n  const getData = useCallback(() => {\n    let searchParams = [`myjobs=1`];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] !== 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] !== 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration !== \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    console.log(address);\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  }, [searchOptions, setJobs, setPopup]);\n\n  useEffect(() => {\n    getData();\n  }, [getData]);\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs>\n            <Typography variant=\"h2\">My Jobs</Typography>\n          </Grid>\n          <Grid item xs>\n            <TextField\n              label=\"Search Jobs\"\n              value={searchOptions.query}\n              onChange={(event) =>\n                setSearchOptions({\n                  ...searchOptions,\n                  query: event.target.value,\n                })\n              }\n              onKeyPress={(ev) => {\n                if (ev.key === \"Enter\") {\n                  getData();\n                }\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment>\n                    <IconButton onClick={() => getData()}>\n                      <SearchIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              style={{ width: \"500px\" }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item>\n            <IconButton onClick={() => setFilterOpen(true)}>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {jobs.length > 0 ? (\n            jobs.map((job) => {\n              return <JobTile job={job} getData={getData} />;\n            })\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No jobs found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default MyJobs;\n","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Welcome.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\apiList.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\PasswordInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\FileUploadInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\lib\\EmailInput.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useAnimations.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\services.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\servicecard.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\Wave.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\ServiceCardsData.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\Hooks\\useScroll.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\query.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\data\\AccordionData.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\AccordionItem.js",[],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\agent.js",["160"],"import { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport sanitizeHtml from 'sanitize-html';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    gap: '2rem',\n    paddingTop: '10vh',\n  },\n  contentContainer: {\n    display: 'flex',\n    gap: '2rem',\n  },\n  formContainer: {\n    width: '500px',\n    height: '600px',\n    border: '1px solid #e2e8f0',\n    borderRadius: '0.5rem',\n    overflow: 'hidden',\n    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n  },\n  innerContainer: {\n    padding: '1.5rem',\n  },\n  title: {\n    fontWeight: 'bold',\n    fontSize: '1.25rem',\n    marginBottom: '0.5rem',\n  },\n  formGroup: {\n    marginBottom: '1rem',\n    paddingRight:'1rem'\n  },\n  label: {\n    display: 'block',\n    color: '#4a5568',\n    fontSize: '0.875rem',\n    fontWeight: 'bold',\n    marginBottom: '0.5rem',\n  },\n  input: {\n    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n    border: '1px solid #e2e8f0',\n    borderRadius: '0.375rem',\n    width: '100%',\n    padding: '0.5rem 0.75rem',\n    color: '#4a5568',\n    lineHeight: '1.25',\n    '&:focus': {\n      outline: 'none',\n      boxShadow: '0 0 0 3px rgba(66, 153, 225, 0.5)',\n    },\n  },\n  buttonContainer: {\n    padding: '1.5rem',\n  },\n  button: {\n    backgroundColor: '#4299e1',\n    color: 'white',\n    fontWeight: 'bold',\n    padding: '0.5rem 1rem',\n    borderRadius: '0.375rem',\n    '&:hover': {\n      backgroundColor: '#2b6cb0',\n    },\n    '&:focus': {\n      outline: 'none',\n      boxShadow: '0 0 0 3px rgba(66, 153, 225, 0.5)',\n    },\n  },\n  jobDescriptionContainer: {\n    width: '500px',\n    height: '570px',\n    fontSize: '0.75rem',\n    color: '#718096',\n    padding: '1rem',\n    border: '1px solid #e2e8f0',\n    borderRadius: '0.5rem',\n    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    whiteSpace: 'pre-line',\n    overflowY: 'auto',\n  },\n  loaderContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  errorMessage: {\n    color: 'red',\n    fontWeight: 'bold',\n    marginTop: '1rem',\n  },\n});\n\nconst JobForm = ({ onSubmit }) => {\n  const classes = useStyles();\n  const [jobTitle, setJobTitle] = useState(\"\");\n  const [company, setCompany] = useState(\"\");\n  const [skills, setSkills] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const handleSubmit = () => {\n    const sanitizedDescription = sanitizeHtml(description);\n    const jobData = {\n      jobTitle,\n      company,\n      skills,\n      description: sanitizedDescription,\n    };\n    onSubmit(jobData);\n  };\n\n  return (\n    <div className={classes.formContainer}>\n      <div className={classes.innerContainer}>\n        <div className={classes.title}>Job Skills Assistant</div>\n        <div className={classes.formGroup}>\n          <label className={classes.label} htmlFor=\"jobTitle\">\n            Job Title\n          </label>\n          <input\n            className={classes.input}\n            id=\"jobTitle\"\n            type=\"text\"\n            placeholder=\"Enter job title\"\n            value={jobTitle}\n            onChange={(e) => setJobTitle(e.target.value)}\n          />\n        </div>\n        <div className={classes.formGroup}>\n          <label className={classes.label} htmlFor=\"company\">\n            Company\n          </label>\n          <input\n            className={classes.input}\n            id=\"company\"\n            type=\"text\"\n            placeholder=\"Enter company name\"\n            value={company}\n            onChange={(e) => setCompany(e.target.value)}\n          />\n        </div>\n        <div className={classes.formGroup}>\n          <label className={classes.label} htmlFor=\"skills\">\n            Job Skills\n          </label>\n          <textarea\n            className={classes.input}\n            id=\"skills\"\n            placeholder=\"Enter job skills\"\n            value={skills}\n            onChange={(e) => setSkills(e.target.value)}\n          />\n        </div>\n        <div className={classes.formGroup}>\n          <label className={classes.label} htmlFor=\"description\">\n            Job Description\n          </label>\n          <textarea\n            className={classes.input}\n            id=\"description\"\n            placeholder=\"Enter job description\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n          />\n        </div>\n        <div className={classes.buttonContainer}>\n          <button\n            className={classes.button}\n            type=\"button\"\n            onClick={handleSubmit}\n          >\n            Generate\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction JobAssistant() {\n  const classes = useStyles();\n  const [jobData, setJobData] = useState(null);\n  const [jobText, setJobText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const history = useHistory();\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      history.push(\"/login\");\n    }\n  }, [history]);\n\n  const onSubmit = async (data) => {\n    setLoading(true);\n    setJobText('');\n    setError(null);\n    setJobData(data);\n\n    try {\n      const response = await fetch('https://talented-ai-api.vercel.app/api/suggest-skills', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      const sanitizedSkills = sanitizeHtml(result.suggestedSkills, {\n        allowedTags: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'ul', 'ol', 'li', 'strong', 'em'],\n        allowedAttributes: {}\n      });\n      setJobText(sanitizedSkills);\n    } catch (error) {\n      console.error('Error generating suggested skills:', error);\n      setError('Failed to generate suggested skills. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h2\" align=\"center\" style={{ fontFamily: \"Chillax-semibold, sans-serif\" }}>\n        Learning Agent\n      </Typography>\n      <div className={classes.contentContainer}>\n        <JobForm onSubmit={onSubmit} />\n        <div className={classes.jobDescriptionContainer}>\n          {loading ? (\n            <div className={classes.loaderContainer}>\n              <div className=\"loader\"></div>\n              <span>Loading...</span>\n            </div>\n          ) : (\n            <div>\n              {error && <div className={classes.errorMessage}>{error}</div>}\n              <div dangerouslySetInnerHTML={{ __html: jobText }} />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default JobAssistant;","C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\recruteragent.js",["161"],"C:\\Users\\pashi\\Downloads\\talented-ai\\frontend\\src\\component\\ai-interview.js",["162","163","164","165"],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":45,"column":3,"nodeType":"172","messageId":"173","endLine":45,"endColumn":9},{"ruleId":"174","severity":1,"message":"175","line":55,"column":11,"nodeType":"176","messageId":"177","endLine":55,"endColumn":35},{"ruleId":"174","severity":1,"message":"178","line":56,"column":10,"nodeType":"176","messageId":"177","endLine":56,"endColumn":19},{"ruleId":"170","severity":1,"message":"179","line":65,"column":3,"nodeType":"172","messageId":"173","endLine":65,"endColumn":14},{"ruleId":"174","severity":1,"message":"180","line":405,"column":9,"nodeType":"176","messageId":"177","endLine":405,"endColumn":17},{"ruleId":"174","severity":1,"message":"181","line":6,"column":3,"nodeType":"176","messageId":"177","endLine":6,"endColumn":8},{"ruleId":"182","severity":1,"message":"183","line":53,"column":6,"nodeType":"184","endLine":53,"endColumn":8,"suggestions":"185"},{"ruleId":"186","severity":1,"message":"187","line":164,"column":34,"nodeType":"188","messageId":"173","endLine":164,"endColumn":36},{"ruleId":"170","severity":1,"message":"171","line":44,"column":3,"nodeType":"172","messageId":"173","endLine":44,"endColumn":9},{"ruleId":"174","severity":1,"message":"189","line":189,"column":10,"nodeType":"176","messageId":"177","endLine":189,"endColumn":17},{"ruleId":"174","severity":1,"message":"189","line":172,"column":10,"nodeType":"176","messageId":"177","endLine":172,"endColumn":17},{"ruleId":"170","severity":1,"message":"190","line":156,"column":1,"nodeType":"172","messageId":"173","endLine":156,"endColumn":11},{"ruleId":"170","severity":1,"message":"191","line":163,"column":1,"nodeType":"172","messageId":"173","endLine":163,"endColumn":10},{"ruleId":"170","severity":1,"message":"192","line":168,"column":1,"nodeType":"172","messageId":"173","endLine":168,"endColumn":12},{"ruleId":"174","severity":1,"message":"193","line":305,"column":11,"nodeType":"176","messageId":"177","endLine":305,"endColumn":18},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"no-dupe-keys","Duplicate key 'button'.","ObjectExpression","unexpected","no-unused-vars","'staggerChildrenAnimation' is assigned a value but never used.","Identifier","unusedVar","'isHovered' is assigned a value but never used.","Duplicate key 'statusBlock'.","'colorSet' is assigned a value but never used.","'Modal' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["196"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'jobData' is assigned a value but never used.","Duplicate key 'messageBox'.","Duplicate key 'aiMessage'.","Duplicate key 'userMessage'.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},"Update the dependencies array to be: [getData]",{"range":"199","text":"200"},[1039,1041],"[getData]"]